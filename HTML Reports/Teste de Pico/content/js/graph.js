/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 226.0, "minX": 0.0, "maxY": 19077.0, "series": [{"data": [[0.0, 472.0], [0.1, 479.0], [0.2, 482.0], [0.3, 482.0], [0.4, 483.0], [0.5, 483.0], [0.6, 484.0], [0.7, 484.0], [0.8, 484.0], [0.9, 485.0], [1.0, 485.0], [1.1, 485.0], [1.2, 486.0], [1.3, 486.0], [1.4, 486.0], [1.5, 487.0], [1.6, 487.0], [1.7, 487.0], [1.8, 487.0], [1.9, 488.0], [2.0, 488.0], [2.1, 488.0], [2.2, 488.0], [2.3, 488.0], [2.4, 489.0], [2.5, 489.0], [2.6, 489.0], [2.7, 489.0], [2.8, 489.0], [2.9, 489.0], [3.0, 490.0], [3.1, 490.0], [3.2, 490.0], [3.3, 490.0], [3.4, 490.0], [3.5, 490.0], [3.6, 491.0], [3.7, 491.0], [3.8, 491.0], [3.9, 491.0], [4.0, 491.0], [4.1, 491.0], [4.2, 491.0], [4.3, 492.0], [4.4, 492.0], [4.5, 492.0], [4.6, 492.0], [4.7, 492.0], [4.8, 492.0], [4.9, 493.0], [5.0, 493.0], [5.1, 493.0], [5.2, 493.0], [5.3, 493.0], [5.4, 493.0], [5.5, 493.0], [5.6, 493.0], [5.7, 493.0], [5.8, 493.0], [5.9, 494.0], [6.0, 494.0], [6.1, 494.0], [6.2, 494.0], [6.3, 494.0], [6.4, 494.0], [6.5, 494.0], [6.6, 494.0], [6.7, 494.0], [6.8, 495.0], [6.9, 495.0], [7.0, 495.0], [7.1, 495.0], [7.2, 495.0], [7.3, 495.0], [7.4, 495.0], [7.5, 495.0], [7.6, 495.0], [7.7, 496.0], [7.8, 496.0], [7.9, 496.0], [8.0, 496.0], [8.1, 496.0], [8.2, 496.0], [8.3, 496.0], [8.4, 496.0], [8.5, 496.0], [8.6, 497.0], [8.7, 497.0], [8.8, 497.0], [8.9, 497.0], [9.0, 497.0], [9.1, 497.0], [9.2, 497.0], [9.3, 497.0], [9.4, 497.0], [9.5, 497.0], [9.6, 497.0], [9.7, 498.0], [9.8, 498.0], [9.9, 498.0], [10.0, 498.0], [10.1, 498.0], [10.2, 498.0], [10.3, 498.0], [10.4, 498.0], [10.5, 499.0], [10.6, 499.0], [10.7, 499.0], [10.8, 499.0], [10.9, 499.0], [11.0, 499.0], [11.1, 499.0], [11.2, 499.0], [11.3, 499.0], [11.4, 499.0], [11.5, 500.0], [11.6, 500.0], [11.7, 500.0], [11.8, 500.0], [11.9, 500.0], [12.0, 500.0], [12.1, 500.0], [12.2, 500.0], [12.3, 500.0], [12.4, 501.0], [12.5, 501.0], [12.6, 501.0], [12.7, 501.0], [12.8, 501.0], [12.9, 501.0], [13.0, 501.0], [13.1, 501.0], [13.2, 501.0], [13.3, 502.0], [13.4, 502.0], [13.5, 502.0], [13.6, 502.0], [13.7, 502.0], [13.8, 502.0], [13.9, 502.0], [14.0, 502.0], [14.1, 502.0], [14.2, 502.0], [14.3, 503.0], [14.4, 503.0], [14.5, 503.0], [14.6, 503.0], [14.7, 503.0], [14.8, 503.0], [14.9, 503.0], [15.0, 503.0], [15.1, 503.0], [15.2, 503.0], [15.3, 504.0], [15.4, 504.0], [15.5, 504.0], [15.6, 504.0], [15.7, 504.0], [15.8, 504.0], [15.9, 504.0], [16.0, 504.0], [16.1, 504.0], [16.2, 504.0], [16.3, 504.0], [16.4, 505.0], [16.5, 505.0], [16.6, 505.0], [16.7, 505.0], [16.8, 505.0], [16.9, 505.0], [17.0, 505.0], [17.1, 505.0], [17.2, 505.0], [17.3, 505.0], [17.4, 506.0], [17.5, 506.0], [17.6, 506.0], [17.7, 506.0], [17.8, 506.0], [17.9, 506.0], [18.0, 506.0], [18.1, 506.0], [18.2, 506.0], [18.3, 506.0], [18.4, 506.0], [18.5, 507.0], [18.6, 507.0], [18.7, 507.0], [18.8, 507.0], [18.9, 507.0], [19.0, 507.0], [19.1, 507.0], [19.2, 508.0], [19.3, 508.0], [19.4, 508.0], [19.5, 508.0], [19.6, 508.0], [19.7, 508.0], [19.8, 508.0], [19.9, 508.0], [20.0, 509.0], [20.1, 509.0], [20.2, 509.0], [20.3, 509.0], [20.4, 509.0], [20.5, 509.0], [20.6, 509.0], [20.7, 509.0], [20.8, 510.0], [20.9, 510.0], [21.0, 510.0], [21.1, 510.0], [21.2, 510.0], [21.3, 510.0], [21.4, 510.0], [21.5, 511.0], [21.6, 511.0], [21.7, 511.0], [21.8, 511.0], [21.9, 511.0], [22.0, 511.0], [22.1, 512.0], [22.2, 512.0], [22.3, 512.0], [22.4, 512.0], [22.5, 512.0], [22.6, 512.0], [22.7, 513.0], [22.8, 513.0], [22.9, 513.0], [23.0, 513.0], [23.1, 513.0], [23.2, 513.0], [23.3, 513.0], [23.4, 514.0], [23.5, 514.0], [23.6, 514.0], [23.7, 514.0], [23.8, 514.0], [23.9, 514.0], [24.0, 514.0], [24.1, 515.0], [24.2, 515.0], [24.3, 515.0], [24.4, 515.0], [24.5, 515.0], [24.6, 515.0], [24.7, 516.0], [24.8, 516.0], [24.9, 516.0], [25.0, 516.0], [25.1, 516.0], [25.2, 516.0], [25.3, 516.0], [25.4, 516.0], [25.5, 517.0], [25.6, 517.0], [25.7, 517.0], [25.8, 517.0], [25.9, 518.0], [26.0, 518.0], [26.1, 518.0], [26.2, 518.0], [26.3, 518.0], [26.4, 519.0], [26.5, 519.0], [26.6, 519.0], [26.7, 519.0], [26.8, 519.0], [26.9, 519.0], [27.0, 520.0], [27.1, 520.0], [27.2, 520.0], [27.3, 520.0], [27.4, 520.0], [27.5, 520.0], [27.6, 521.0], [27.7, 521.0], [27.8, 521.0], [27.9, 521.0], [28.0, 521.0], [28.1, 521.0], [28.2, 522.0], [28.3, 522.0], [28.4, 522.0], [28.5, 522.0], [28.6, 522.0], [28.7, 522.0], [28.8, 523.0], [28.9, 523.0], [29.0, 523.0], [29.1, 523.0], [29.2, 523.0], [29.3, 524.0], [29.4, 524.0], [29.5, 525.0], [29.6, 525.0], [29.7, 525.0], [29.8, 525.0], [29.9, 525.0], [30.0, 526.0], [30.1, 526.0], [30.2, 526.0], [30.3, 526.0], [30.4, 526.0], [30.5, 526.0], [30.6, 527.0], [30.7, 527.0], [30.8, 527.0], [30.9, 527.0], [31.0, 527.0], [31.1, 528.0], [31.2, 528.0], [31.3, 528.0], [31.4, 528.0], [31.5, 528.0], [31.6, 529.0], [31.7, 529.0], [31.8, 529.0], [31.9, 529.0], [32.0, 529.0], [32.1, 530.0], [32.2, 530.0], [32.3, 530.0], [32.4, 530.0], [32.5, 530.0], [32.6, 530.0], [32.7, 531.0], [32.8, 531.0], [32.9, 531.0], [33.0, 531.0], [33.1, 531.0], [33.2, 532.0], [33.3, 532.0], [33.4, 532.0], [33.5, 532.0], [33.6, 533.0], [33.7, 533.0], [33.8, 533.0], [33.9, 533.0], [34.0, 533.0], [34.1, 534.0], [34.2, 534.0], [34.3, 534.0], [34.4, 534.0], [34.5, 534.0], [34.6, 535.0], [34.7, 535.0], [34.8, 535.0], [34.9, 535.0], [35.0, 536.0], [35.1, 536.0], [35.2, 536.0], [35.3, 536.0], [35.4, 537.0], [35.5, 537.0], [35.6, 537.0], [35.7, 537.0], [35.8, 537.0], [35.9, 538.0], [36.0, 538.0], [36.1, 538.0], [36.2, 538.0], [36.3, 539.0], [36.4, 539.0], [36.5, 539.0], [36.6, 539.0], [36.7, 540.0], [36.8, 540.0], [36.9, 540.0], [37.0, 540.0], [37.1, 540.0], [37.2, 540.0], [37.3, 541.0], [37.4, 541.0], [37.5, 541.0], [37.6, 542.0], [37.7, 542.0], [37.8, 542.0], [37.9, 542.0], [38.0, 543.0], [38.1, 543.0], [38.2, 543.0], [38.3, 543.0], [38.4, 544.0], [38.5, 544.0], [38.6, 544.0], [38.7, 544.0], [38.8, 545.0], [38.9, 545.0], [39.0, 545.0], [39.1, 545.0], [39.2, 546.0], [39.3, 546.0], [39.4, 546.0], [39.5, 546.0], [39.6, 547.0], [39.7, 547.0], [39.8, 547.0], [39.9, 547.0], [40.0, 548.0], [40.1, 548.0], [40.2, 548.0], [40.3, 548.0], [40.4, 549.0], [40.5, 549.0], [40.6, 549.0], [40.7, 550.0], [40.8, 550.0], [40.9, 550.0], [41.0, 551.0], [41.1, 551.0], [41.2, 551.0], [41.3, 552.0], [41.4, 552.0], [41.5, 552.0], [41.6, 553.0], [41.7, 553.0], [41.8, 553.0], [41.9, 554.0], [42.0, 554.0], [42.1, 554.0], [42.2, 554.0], [42.3, 555.0], [42.4, 555.0], [42.5, 556.0], [42.6, 556.0], [42.7, 556.0], [42.8, 556.0], [42.9, 557.0], [43.0, 557.0], [43.1, 557.0], [43.2, 558.0], [43.3, 558.0], [43.4, 559.0], [43.5, 559.0], [43.6, 559.0], [43.7, 560.0], [43.8, 560.0], [43.9, 561.0], [44.0, 561.0], [44.1, 562.0], [44.2, 562.0], [44.3, 562.0], [44.4, 562.0], [44.5, 562.0], [44.6, 563.0], [44.7, 563.0], [44.8, 563.0], [44.9, 563.0], [45.0, 564.0], [45.1, 564.0], [45.2, 564.0], [45.3, 564.0], [45.4, 565.0], [45.5, 565.0], [45.6, 565.0], [45.7, 566.0], [45.8, 566.0], [45.9, 567.0], [46.0, 567.0], [46.1, 567.0], [46.2, 567.0], [46.3, 567.0], [46.4, 568.0], [46.5, 568.0], [46.6, 569.0], [46.7, 569.0], [46.8, 569.0], [46.9, 569.0], [47.0, 570.0], [47.1, 570.0], [47.2, 570.0], [47.3, 570.0], [47.4, 571.0], [47.5, 572.0], [47.6, 572.0], [47.7, 573.0], [47.8, 573.0], [47.9, 573.0], [48.0, 574.0], [48.1, 574.0], [48.2, 574.0], [48.3, 575.0], [48.4, 575.0], [48.5, 576.0], [48.6, 576.0], [48.7, 576.0], [48.8, 577.0], [48.9, 577.0], [49.0, 578.0], [49.1, 578.0], [49.2, 578.0], [49.3, 579.0], [49.4, 579.0], [49.5, 579.0], [49.6, 580.0], [49.7, 580.0], [49.8, 581.0], [49.9, 581.0], [50.0, 581.0], [50.1, 582.0], [50.2, 583.0], [50.3, 583.0], [50.4, 584.0], [50.5, 584.0], [50.6, 585.0], [50.7, 585.0], [50.8, 585.0], [50.9, 586.0], [51.0, 587.0], [51.1, 588.0], [51.2, 588.0], [51.3, 588.0], [51.4, 589.0], [51.5, 589.0], [51.6, 590.0], [51.7, 590.0], [51.8, 591.0], [51.9, 591.0], [52.0, 592.0], [52.1, 592.0], [52.2, 592.0], [52.3, 593.0], [52.4, 594.0], [52.5, 594.0], [52.6, 595.0], [52.7, 595.0], [52.8, 595.0], [52.9, 595.0], [53.0, 596.0], [53.1, 596.0], [53.2, 597.0], [53.3, 597.0], [53.4, 598.0], [53.5, 599.0], [53.6, 599.0], [53.7, 600.0], [53.8, 601.0], [53.9, 601.0], [54.0, 602.0], [54.1, 602.0], [54.2, 603.0], [54.3, 603.0], [54.4, 604.0], [54.5, 604.0], [54.6, 605.0], [54.7, 606.0], [54.8, 606.0], [54.9, 607.0], [55.0, 608.0], [55.1, 608.0], [55.2, 608.0], [55.3, 609.0], [55.4, 610.0], [55.5, 610.0], [55.6, 610.0], [55.7, 611.0], [55.8, 613.0], [55.9, 614.0], [56.0, 614.0], [56.1, 614.0], [56.2, 615.0], [56.3, 615.0], [56.4, 616.0], [56.5, 616.0], [56.6, 617.0], [56.7, 617.0], [56.8, 618.0], [56.9, 618.0], [57.0, 619.0], [57.1, 619.0], [57.2, 619.0], [57.3, 620.0], [57.4, 620.0], [57.5, 621.0], [57.6, 622.0], [57.7, 622.0], [57.8, 622.0], [57.9, 623.0], [58.0, 624.0], [58.1, 624.0], [58.2, 625.0], [58.3, 627.0], [58.4, 627.0], [58.5, 628.0], [58.6, 629.0], [58.7, 630.0], [58.8, 630.0], [58.9, 631.0], [59.0, 632.0], [59.1, 633.0], [59.2, 633.0], [59.3, 634.0], [59.4, 635.0], [59.5, 636.0], [59.6, 637.0], [59.7, 638.0], [59.8, 638.0], [59.9, 639.0], [60.0, 639.0], [60.1, 641.0], [60.2, 642.0], [60.3, 643.0], [60.4, 644.0], [60.5, 644.0], [60.6, 645.0], [60.7, 645.0], [60.8, 647.0], [60.9, 647.0], [61.0, 648.0], [61.1, 649.0], [61.2, 650.0], [61.3, 651.0], [61.4, 652.0], [61.5, 653.0], [61.6, 654.0], [61.7, 655.0], [61.8, 655.0], [61.9, 656.0], [62.0, 657.0], [62.1, 657.0], [62.2, 658.0], [62.3, 659.0], [62.4, 660.0], [62.5, 661.0], [62.6, 662.0], [62.7, 663.0], [62.8, 664.0], [62.9, 664.0], [63.0, 666.0], [63.1, 666.0], [63.2, 667.0], [63.3, 668.0], [63.4, 668.0], [63.5, 670.0], [63.6, 670.0], [63.7, 672.0], [63.8, 673.0], [63.9, 674.0], [64.0, 675.0], [64.1, 677.0], [64.2, 678.0], [64.3, 680.0], [64.4, 680.0], [64.5, 681.0], [64.6, 682.0], [64.7, 684.0], [64.8, 684.0], [64.9, 685.0], [65.0, 686.0], [65.1, 687.0], [65.2, 689.0], [65.3, 689.0], [65.4, 692.0], [65.5, 692.0], [65.6, 694.0], [65.7, 695.0], [65.8, 696.0], [65.9, 697.0], [66.0, 698.0], [66.1, 699.0], [66.2, 700.0], [66.3, 701.0], [66.4, 702.0], [66.5, 703.0], [66.6, 704.0], [66.7, 705.0], [66.8, 706.0], [66.9, 708.0], [67.0, 709.0], [67.1, 710.0], [67.2, 710.0], [67.3, 711.0], [67.4, 712.0], [67.5, 714.0], [67.6, 715.0], [67.7, 716.0], [67.8, 718.0], [67.9, 719.0], [68.0, 720.0], [68.1, 721.0], [68.2, 724.0], [68.3, 724.0], [68.4, 725.0], [68.5, 727.0], [68.6, 728.0], [68.7, 729.0], [68.8, 731.0], [68.9, 733.0], [69.0, 734.0], [69.1, 735.0], [69.2, 736.0], [69.3, 738.0], [69.4, 739.0], [69.5, 740.0], [69.6, 742.0], [69.7, 743.0], [69.8, 743.0], [69.9, 745.0], [70.0, 747.0], [70.1, 750.0], [70.2, 752.0], [70.3, 753.0], [70.4, 754.0], [70.5, 756.0], [70.6, 757.0], [70.7, 760.0], [70.8, 761.0], [70.9, 763.0], [71.0, 765.0], [71.1, 766.0], [71.2, 768.0], [71.3, 770.0], [71.4, 773.0], [71.5, 774.0], [71.6, 775.0], [71.7, 778.0], [71.8, 779.0], [71.9, 780.0], [72.0, 781.0], [72.1, 783.0], [72.2, 784.0], [72.3, 785.0], [72.4, 788.0], [72.5, 789.0], [72.6, 790.0], [72.7, 791.0], [72.8, 793.0], [72.9, 795.0], [73.0, 796.0], [73.1, 797.0], [73.2, 799.0], [73.3, 800.0], [73.4, 803.0], [73.5, 806.0], [73.6, 808.0], [73.7, 811.0], [73.8, 813.0], [73.9, 815.0], [74.0, 816.0], [74.1, 818.0], [74.2, 819.0], [74.3, 820.0], [74.4, 821.0], [74.5, 823.0], [74.6, 825.0], [74.7, 827.0], [74.8, 828.0], [74.9, 831.0], [75.0, 832.0], [75.1, 834.0], [75.2, 835.0], [75.3, 837.0], [75.4, 839.0], [75.5, 841.0], [75.6, 842.0], [75.7, 845.0], [75.8, 849.0], [75.9, 852.0], [76.0, 853.0], [76.1, 855.0], [76.2, 857.0], [76.3, 860.0], [76.4, 863.0], [76.5, 864.0], [76.6, 866.0], [76.7, 868.0], [76.8, 869.0], [76.9, 870.0], [77.0, 872.0], [77.1, 874.0], [77.2, 875.0], [77.3, 878.0], [77.4, 880.0], [77.5, 883.0], [77.6, 886.0], [77.7, 889.0], [77.8, 894.0], [77.9, 896.0], [78.0, 898.0], [78.1, 903.0], [78.2, 905.0], [78.3, 909.0], [78.4, 914.0], [78.5, 919.0], [78.6, 922.0], [78.7, 923.0], [78.8, 925.0], [78.9, 927.0], [79.0, 931.0], [79.1, 933.0], [79.2, 941.0], [79.3, 945.0], [79.4, 949.0], [79.5, 952.0], [79.6, 956.0], [79.7, 958.0], [79.8, 965.0], [79.9, 967.0], [80.0, 972.0], [80.1, 975.0], [80.2, 978.0], [80.3, 981.0], [80.4, 985.0], [80.5, 987.0], [80.6, 993.0], [80.7, 997.0], [80.8, 998.0], [80.9, 1000.0], [81.0, 1007.0], [81.1, 1011.0], [81.2, 1014.0], [81.3, 1017.0], [81.4, 1019.0], [81.5, 1021.0], [81.6, 1024.0], [81.7, 1025.0], [81.8, 1026.0], [81.9, 1029.0], [82.0, 1033.0], [82.1, 1034.0], [82.2, 1036.0], [82.3, 1039.0], [82.4, 1044.0], [82.5, 1049.0], [82.6, 1051.0], [82.7, 1053.0], [82.8, 1057.0], [82.9, 1060.0], [83.0, 1064.0], [83.1, 1067.0], [83.2, 1069.0], [83.3, 1070.0], [83.4, 1075.0], [83.5, 1078.0], [83.6, 1080.0], [83.7, 1083.0], [83.8, 1086.0], [83.9, 1088.0], [84.0, 1091.0], [84.1, 1094.0], [84.2, 1097.0], [84.3, 1101.0], [84.4, 1104.0], [84.5, 1112.0], [84.6, 1116.0], [84.7, 1118.0], [84.8, 1121.0], [84.9, 1125.0], [85.0, 1130.0], [85.1, 1132.0], [85.2, 1135.0], [85.3, 1139.0], [85.4, 1142.0], [85.5, 1145.0], [85.6, 1148.0], [85.7, 1152.0], [85.8, 1154.0], [85.9, 1158.0], [86.0, 1161.0], [86.1, 1165.0], [86.2, 1170.0], [86.3, 1174.0], [86.4, 1178.0], [86.5, 1183.0], [86.6, 1187.0], [86.7, 1190.0], [86.8, 1195.0], [86.9, 1200.0], [87.0, 1204.0], [87.1, 1209.0], [87.2, 1214.0], [87.3, 1216.0], [87.4, 1223.0], [87.5, 1230.0], [87.6, 1237.0], [87.7, 1242.0], [87.8, 1245.0], [87.9, 1248.0], [88.0, 1253.0], [88.1, 1255.0], [88.2, 1260.0], [88.3, 1263.0], [88.4, 1278.0], [88.5, 1282.0], [88.6, 1289.0], [88.7, 1293.0], [88.8, 1297.0], [88.9, 1305.0], [89.0, 1309.0], [89.1, 1313.0], [89.2, 1318.0], [89.3, 1321.0], [89.4, 1330.0], [89.5, 1335.0], [89.6, 1343.0], [89.7, 1347.0], [89.8, 1352.0], [89.9, 1362.0], [90.0, 1366.0], [90.1, 1371.0], [90.2, 1376.0], [90.3, 1379.0], [90.4, 1383.0], [90.5, 1393.0], [90.6, 1398.0], [90.7, 1404.0], [90.8, 1412.0], [90.9, 1418.0], [91.0, 1424.0], [91.1, 1430.0], [91.2, 1436.0], [91.3, 1439.0], [91.4, 1444.0], [91.5, 1451.0], [91.6, 1456.0], [91.7, 1458.0], [91.8, 1462.0], [91.9, 1470.0], [92.0, 1481.0], [92.1, 1485.0], [92.2, 1491.0], [92.3, 1499.0], [92.4, 1508.0], [92.5, 1511.0], [92.6, 1513.0], [92.7, 1520.0], [92.8, 1527.0], [92.9, 1533.0], [93.0, 1538.0], [93.1, 1542.0], [93.2, 1547.0], [93.3, 1554.0], [93.4, 1566.0], [93.5, 1575.0], [93.6, 1582.0], [93.7, 1589.0], [93.8, 1600.0], [93.9, 1613.0], [94.0, 1620.0], [94.1, 1645.0], [94.2, 1657.0], [94.3, 1674.0], [94.4, 1697.0], [94.5, 1724.0], [94.6, 1739.0], [94.7, 1757.0], [94.8, 1763.0], [94.9, 1780.0], [95.0, 1786.0], [95.1, 1803.0], [95.2, 1814.0], [95.3, 1826.0], [95.4, 1863.0], [95.5, 1907.0], [95.6, 1926.0], [95.7, 1944.0], [95.8, 1955.0], [95.9, 1987.0], [96.0, 2011.0], [96.1, 2044.0], [96.2, 2064.0], [96.3, 2091.0], [96.4, 2117.0], [96.5, 2133.0], [96.6, 2163.0], [96.7, 2206.0], [96.8, 2226.0], [96.9, 2237.0], [97.0, 2261.0], [97.1, 2284.0], [97.2, 2310.0], [97.3, 2335.0], [97.4, 2357.0], [97.5, 2382.0], [97.6, 2399.0], [97.7, 2440.0], [97.8, 2487.0], [97.9, 2555.0], [98.0, 2602.0], [98.1, 2667.0], [98.2, 2734.0], [98.3, 2774.0], [98.4, 2809.0], [98.5, 2857.0], [98.6, 2876.0], [98.7, 2963.0], [98.8, 3008.0], [98.9, 3061.0], [99.0, 3132.0], [99.1, 3235.0], [99.2, 3286.0], [99.3, 3341.0], [99.4, 3377.0], [99.5, 3385.0], [99.6, 3422.0], [99.7, 3505.0], [99.8, 3734.0], [99.9, 4191.0], [100.0, 19077.0]], "isOverall": false, "label": "HTTP Request - Index", "isController": false}, {"data": [[0.0, 226.0], [0.1, 232.0], [0.2, 233.0], [0.3, 234.0], [0.4, 235.0], [0.5, 235.0], [0.6, 235.0], [0.7, 236.0], [0.8, 236.0], [0.9, 236.0], [1.0, 237.0], [1.1, 237.0], [1.2, 237.0], [1.3, 237.0], [1.4, 237.0], [1.5, 237.0], [1.6, 237.0], [1.7, 238.0], [1.8, 238.0], [1.9, 238.0], [2.0, 238.0], [2.1, 238.0], [2.2, 238.0], [2.3, 238.0], [2.4, 239.0], [2.5, 239.0], [2.6, 239.0], [2.7, 239.0], [2.8, 239.0], [2.9, 239.0], [3.0, 239.0], [3.1, 239.0], [3.2, 239.0], [3.3, 240.0], [3.4, 240.0], [3.5, 240.0], [3.6, 240.0], [3.7, 240.0], [3.8, 240.0], [3.9, 240.0], [4.0, 240.0], [4.1, 240.0], [4.2, 240.0], [4.3, 241.0], [4.4, 241.0], [4.5, 241.0], [4.6, 241.0], [4.7, 241.0], [4.8, 241.0], [4.9, 241.0], [5.0, 241.0], [5.1, 241.0], [5.2, 242.0], [5.3, 242.0], [5.4, 242.0], [5.5, 242.0], [5.6, 242.0], [5.7, 242.0], [5.8, 242.0], [5.9, 242.0], [6.0, 242.0], [6.1, 242.0], [6.2, 242.0], [6.3, 242.0], [6.4, 243.0], [6.5, 243.0], [6.6, 243.0], [6.7, 243.0], [6.8, 243.0], [6.9, 243.0], [7.0, 243.0], [7.1, 243.0], [7.2, 243.0], [7.3, 243.0], [7.4, 243.0], [7.5, 243.0], [7.6, 243.0], [7.7, 243.0], [7.8, 244.0], [7.9, 244.0], [8.0, 244.0], [8.1, 244.0], [8.2, 244.0], [8.3, 244.0], [8.4, 244.0], [8.5, 244.0], [8.6, 244.0], [8.7, 244.0], [8.8, 244.0], [8.9, 244.0], [9.0, 244.0], [9.1, 245.0], [9.2, 245.0], [9.3, 245.0], [9.4, 245.0], [9.5, 245.0], [9.6, 245.0], [9.7, 245.0], [9.8, 245.0], [9.9, 245.0], [10.0, 245.0], [10.1, 245.0], [10.2, 245.0], [10.3, 245.0], [10.4, 245.0], [10.5, 245.0], [10.6, 245.0], [10.7, 246.0], [10.8, 246.0], [10.9, 246.0], [11.0, 246.0], [11.1, 246.0], [11.2, 246.0], [11.3, 246.0], [11.4, 246.0], [11.5, 246.0], [11.6, 246.0], [11.7, 246.0], [11.8, 247.0], [11.9, 247.0], [12.0, 247.0], [12.1, 247.0], [12.2, 247.0], [12.3, 247.0], [12.4, 247.0], [12.5, 247.0], [12.6, 247.0], [12.7, 247.0], [12.8, 247.0], [12.9, 247.0], [13.0, 247.0], [13.1, 248.0], [13.2, 248.0], [13.3, 248.0], [13.4, 248.0], [13.5, 248.0], [13.6, 248.0], [13.7, 248.0], [13.8, 248.0], [13.9, 248.0], [14.0, 248.0], [14.1, 248.0], [14.2, 248.0], [14.3, 248.0], [14.4, 248.0], [14.5, 249.0], [14.6, 249.0], [14.7, 249.0], [14.8, 249.0], [14.9, 249.0], [15.0, 249.0], [15.1, 249.0], [15.2, 249.0], [15.3, 249.0], [15.4, 249.0], [15.5, 249.0], [15.6, 249.0], [15.7, 249.0], [15.8, 249.0], [15.9, 250.0], [16.0, 250.0], [16.1, 250.0], [16.2, 250.0], [16.3, 250.0], [16.4, 250.0], [16.5, 250.0], [16.6, 250.0], [16.7, 250.0], [16.8, 250.0], [16.9, 250.0], [17.0, 250.0], [17.1, 250.0], [17.2, 251.0], [17.3, 251.0], [17.4, 251.0], [17.5, 251.0], [17.6, 251.0], [17.7, 251.0], [17.8, 251.0], [17.9, 251.0], [18.0, 251.0], [18.1, 251.0], [18.2, 251.0], [18.3, 251.0], [18.4, 251.0], [18.5, 251.0], [18.6, 251.0], [18.7, 252.0], [18.8, 252.0], [18.9, 252.0], [19.0, 252.0], [19.1, 252.0], [19.2, 252.0], [19.3, 252.0], [19.4, 252.0], [19.5, 252.0], [19.6, 253.0], [19.7, 253.0], [19.8, 253.0], [19.9, 253.0], [20.0, 253.0], [20.1, 253.0], [20.2, 253.0], [20.3, 253.0], [20.4, 253.0], [20.5, 253.0], [20.6, 253.0], [20.7, 253.0], [20.8, 254.0], [20.9, 254.0], [21.0, 254.0], [21.1, 254.0], [21.2, 254.0], [21.3, 254.0], [21.4, 254.0], [21.5, 255.0], [21.6, 255.0], [21.7, 255.0], [21.8, 255.0], [21.9, 255.0], [22.0, 255.0], [22.1, 255.0], [22.2, 255.0], [22.3, 256.0], [22.4, 256.0], [22.5, 256.0], [22.6, 256.0], [22.7, 256.0], [22.8, 257.0], [22.9, 257.0], [23.0, 257.0], [23.1, 257.0], [23.2, 257.0], [23.3, 257.0], [23.4, 257.0], [23.5, 257.0], [23.6, 258.0], [23.7, 258.0], [23.8, 258.0], [23.9, 258.0], [24.0, 258.0], [24.1, 258.0], [24.2, 258.0], [24.3, 259.0], [24.4, 259.0], [24.5, 259.0], [24.6, 259.0], [24.7, 259.0], [24.8, 259.0], [24.9, 259.0], [25.0, 260.0], [25.1, 260.0], [25.2, 260.0], [25.3, 260.0], [25.4, 260.0], [25.5, 260.0], [25.6, 260.0], [25.7, 261.0], [25.8, 261.0], [25.9, 261.0], [26.0, 261.0], [26.1, 261.0], [26.2, 262.0], [26.3, 262.0], [26.4, 262.0], [26.5, 262.0], [26.6, 262.0], [26.7, 263.0], [26.8, 263.0], [26.9, 263.0], [27.0, 263.0], [27.1, 263.0], [27.2, 264.0], [27.3, 264.0], [27.4, 264.0], [27.5, 264.0], [27.6, 265.0], [27.7, 265.0], [27.8, 265.0], [27.9, 265.0], [28.0, 265.0], [28.1, 265.0], [28.2, 266.0], [28.3, 266.0], [28.4, 266.0], [28.5, 266.0], [28.6, 266.0], [28.7, 267.0], [28.8, 267.0], [28.9, 267.0], [29.0, 268.0], [29.1, 268.0], [29.2, 268.0], [29.3, 269.0], [29.4, 269.0], [29.5, 269.0], [29.6, 270.0], [29.7, 270.0], [29.8, 270.0], [29.9, 270.0], [30.0, 270.0], [30.1, 270.0], [30.2, 271.0], [30.3, 271.0], [30.4, 271.0], [30.5, 271.0], [30.6, 272.0], [30.7, 272.0], [30.8, 272.0], [30.9, 272.0], [31.0, 272.0], [31.1, 272.0], [31.2, 273.0], [31.3, 273.0], [31.4, 273.0], [31.5, 274.0], [31.6, 274.0], [31.7, 274.0], [31.8, 274.0], [31.9, 274.0], [32.0, 275.0], [32.1, 275.0], [32.2, 275.0], [32.3, 275.0], [32.4, 276.0], [32.5, 276.0], [32.6, 276.0], [32.7, 276.0], [32.8, 276.0], [32.9, 277.0], [33.0, 277.0], [33.1, 277.0], [33.2, 277.0], [33.3, 278.0], [33.4, 278.0], [33.5, 278.0], [33.6, 278.0], [33.7, 278.0], [33.8, 279.0], [33.9, 279.0], [34.0, 279.0], [34.1, 279.0], [34.2, 279.0], [34.3, 280.0], [34.4, 280.0], [34.5, 280.0], [34.6, 280.0], [34.7, 280.0], [34.8, 281.0], [34.9, 281.0], [35.0, 281.0], [35.1, 281.0], [35.2, 281.0], [35.3, 282.0], [35.4, 282.0], [35.5, 282.0], [35.6, 282.0], [35.7, 282.0], [35.8, 282.0], [35.9, 283.0], [36.0, 283.0], [36.1, 283.0], [36.2, 283.0], [36.3, 283.0], [36.4, 284.0], [36.5, 284.0], [36.6, 284.0], [36.7, 284.0], [36.8, 284.0], [36.9, 284.0], [37.0, 284.0], [37.1, 285.0], [37.2, 285.0], [37.3, 285.0], [37.4, 285.0], [37.5, 285.0], [37.6, 286.0], [37.7, 286.0], [37.8, 286.0], [37.9, 286.0], [38.0, 286.0], [38.1, 286.0], [38.2, 287.0], [38.3, 287.0], [38.4, 287.0], [38.5, 288.0], [38.6, 288.0], [38.7, 288.0], [38.8, 288.0], [38.9, 288.0], [39.0, 289.0], [39.1, 289.0], [39.2, 289.0], [39.3, 289.0], [39.4, 290.0], [39.5, 290.0], [39.6, 290.0], [39.7, 290.0], [39.8, 290.0], [39.9, 291.0], [40.0, 291.0], [40.1, 291.0], [40.2, 291.0], [40.3, 291.0], [40.4, 291.0], [40.5, 292.0], [40.6, 292.0], [40.7, 292.0], [40.8, 292.0], [40.9, 293.0], [41.0, 293.0], [41.1, 293.0], [41.2, 293.0], [41.3, 294.0], [41.4, 294.0], [41.5, 294.0], [41.6, 294.0], [41.7, 294.0], [41.8, 295.0], [41.9, 295.0], [42.0, 295.0], [42.1, 295.0], [42.2, 295.0], [42.3, 296.0], [42.4, 296.0], [42.5, 296.0], [42.6, 296.0], [42.7, 296.0], [42.8, 297.0], [42.9, 297.0], [43.0, 297.0], [43.1, 298.0], [43.2, 298.0], [43.3, 298.0], [43.4, 298.0], [43.5, 298.0], [43.6, 299.0], [43.7, 299.0], [43.8, 300.0], [43.9, 300.0], [44.0, 300.0], [44.1, 300.0], [44.2, 301.0], [44.3, 301.0], [44.4, 301.0], [44.5, 301.0], [44.6, 302.0], [44.7, 302.0], [44.8, 302.0], [44.9, 303.0], [45.0, 303.0], [45.1, 304.0], [45.2, 304.0], [45.3, 304.0], [45.4, 305.0], [45.5, 305.0], [45.6, 305.0], [45.7, 306.0], [45.8, 306.0], [45.9, 307.0], [46.0, 307.0], [46.1, 307.0], [46.2, 308.0], [46.3, 308.0], [46.4, 308.0], [46.5, 309.0], [46.6, 309.0], [46.7, 309.0], [46.8, 310.0], [46.9, 311.0], [47.0, 311.0], [47.1, 312.0], [47.2, 312.0], [47.3, 312.0], [47.4, 313.0], [47.5, 313.0], [47.6, 313.0], [47.7, 314.0], [47.8, 314.0], [47.9, 314.0], [48.0, 315.0], [48.1, 315.0], [48.2, 316.0], [48.3, 316.0], [48.4, 317.0], [48.5, 317.0], [48.6, 318.0], [48.7, 318.0], [48.8, 318.0], [48.9, 319.0], [49.0, 319.0], [49.1, 320.0], [49.2, 320.0], [49.3, 321.0], [49.4, 321.0], [49.5, 322.0], [49.6, 322.0], [49.7, 322.0], [49.8, 323.0], [49.9, 323.0], [50.0, 324.0], [50.1, 325.0], [50.2, 325.0], [50.3, 325.0], [50.4, 326.0], [50.5, 326.0], [50.6, 327.0], [50.7, 327.0], [50.8, 327.0], [50.9, 328.0], [51.0, 328.0], [51.1, 329.0], [51.2, 329.0], [51.3, 330.0], [51.4, 330.0], [51.5, 331.0], [51.6, 331.0], [51.7, 331.0], [51.8, 332.0], [51.9, 332.0], [52.0, 332.0], [52.1, 333.0], [52.2, 334.0], [52.3, 334.0], [52.4, 335.0], [52.5, 335.0], [52.6, 335.0], [52.7, 336.0], [52.8, 337.0], [52.9, 337.0], [53.0, 338.0], [53.1, 338.0], [53.2, 338.0], [53.3, 339.0], [53.4, 340.0], [53.5, 340.0], [53.6, 341.0], [53.7, 341.0], [53.8, 341.0], [53.9, 342.0], [54.0, 342.0], [54.1, 343.0], [54.2, 344.0], [54.3, 344.0], [54.4, 345.0], [54.5, 346.0], [54.6, 347.0], [54.7, 347.0], [54.8, 348.0], [54.9, 348.0], [55.0, 349.0], [55.1, 350.0], [55.2, 350.0], [55.3, 351.0], [55.4, 352.0], [55.5, 353.0], [55.6, 353.0], [55.7, 354.0], [55.8, 354.0], [55.9, 355.0], [56.0, 355.0], [56.1, 356.0], [56.2, 356.0], [56.3, 357.0], [56.4, 358.0], [56.5, 359.0], [56.6, 359.0], [56.7, 360.0], [56.8, 360.0], [56.9, 362.0], [57.0, 363.0], [57.1, 363.0], [57.2, 364.0], [57.3, 365.0], [57.4, 366.0], [57.5, 367.0], [57.6, 367.0], [57.7, 368.0], [57.8, 369.0], [57.9, 369.0], [58.0, 370.0], [58.1, 371.0], [58.2, 371.0], [58.3, 372.0], [58.4, 373.0], [58.5, 373.0], [58.6, 374.0], [58.7, 375.0], [58.8, 376.0], [58.9, 377.0], [59.0, 377.0], [59.1, 378.0], [59.2, 379.0], [59.3, 379.0], [59.4, 380.0], [59.5, 381.0], [59.6, 382.0], [59.7, 383.0], [59.8, 383.0], [59.9, 385.0], [60.0, 385.0], [60.1, 387.0], [60.2, 387.0], [60.3, 388.0], [60.4, 388.0], [60.5, 388.0], [60.6, 389.0], [60.7, 390.0], [60.8, 391.0], [60.9, 391.0], [61.0, 392.0], [61.1, 393.0], [61.2, 394.0], [61.3, 395.0], [61.4, 396.0], [61.5, 397.0], [61.6, 397.0], [61.7, 398.0], [61.8, 398.0], [61.9, 400.0], [62.0, 401.0], [62.1, 402.0], [62.2, 403.0], [62.3, 405.0], [62.4, 406.0], [62.5, 406.0], [62.6, 406.0], [62.7, 407.0], [62.8, 408.0], [62.9, 409.0], [63.0, 410.0], [63.1, 412.0], [63.2, 413.0], [63.3, 414.0], [63.4, 415.0], [63.5, 416.0], [63.6, 417.0], [63.7, 418.0], [63.8, 419.0], [63.9, 420.0], [64.0, 420.0], [64.1, 422.0], [64.2, 424.0], [64.3, 424.0], [64.4, 425.0], [64.5, 426.0], [64.6, 427.0], [64.7, 427.0], [64.8, 428.0], [64.9, 430.0], [65.0, 430.0], [65.1, 432.0], [65.2, 432.0], [65.3, 434.0], [65.4, 435.0], [65.5, 436.0], [65.6, 437.0], [65.7, 438.0], [65.8, 439.0], [65.9, 440.0], [66.0, 441.0], [66.1, 442.0], [66.2, 444.0], [66.3, 444.0], [66.4, 445.0], [66.5, 446.0], [66.6, 447.0], [66.7, 448.0], [66.8, 449.0], [66.9, 451.0], [67.0, 452.0], [67.1, 453.0], [67.2, 454.0], [67.3, 456.0], [67.4, 456.0], [67.5, 457.0], [67.6, 458.0], [67.7, 459.0], [67.8, 461.0], [67.9, 462.0], [68.0, 463.0], [68.1, 464.0], [68.2, 466.0], [68.3, 467.0], [68.4, 468.0], [68.5, 469.0], [68.6, 470.0], [68.7, 471.0], [68.8, 472.0], [68.9, 473.0], [69.0, 473.0], [69.1, 474.0], [69.2, 475.0], [69.3, 477.0], [69.4, 479.0], [69.5, 480.0], [69.6, 480.0], [69.7, 482.0], [69.8, 482.0], [69.9, 483.0], [70.0, 486.0], [70.1, 487.0], [70.2, 488.0], [70.3, 489.0], [70.4, 490.0], [70.5, 491.0], [70.6, 493.0], [70.7, 494.0], [70.8, 495.0], [70.9, 495.0], [71.0, 496.0], [71.1, 498.0], [71.2, 499.0], [71.3, 501.0], [71.4, 502.0], [71.5, 503.0], [71.6, 505.0], [71.7, 506.0], [71.8, 509.0], [71.9, 511.0], [72.0, 513.0], [72.1, 514.0], [72.2, 515.0], [72.3, 516.0], [72.4, 518.0], [72.5, 520.0], [72.6, 521.0], [72.7, 524.0], [72.8, 526.0], [72.9, 527.0], [73.0, 529.0], [73.1, 530.0], [73.2, 533.0], [73.3, 538.0], [73.4, 541.0], [73.5, 542.0], [73.6, 546.0], [73.7, 547.0], [73.8, 550.0], [73.9, 552.0], [74.0, 555.0], [74.1, 557.0], [74.2, 559.0], [74.3, 561.0], [74.4, 562.0], [74.5, 565.0], [74.6, 568.0], [74.7, 569.0], [74.8, 570.0], [74.9, 571.0], [75.0, 574.0], [75.1, 576.0], [75.2, 580.0], [75.3, 582.0], [75.4, 584.0], [75.5, 586.0], [75.6, 588.0], [75.7, 591.0], [75.8, 593.0], [75.9, 595.0], [76.0, 597.0], [76.1, 598.0], [76.2, 600.0], [76.3, 602.0], [76.4, 605.0], [76.5, 606.0], [76.6, 611.0], [76.7, 613.0], [76.8, 615.0], [76.9, 617.0], [77.0, 622.0], [77.1, 624.0], [77.2, 629.0], [77.3, 633.0], [77.4, 636.0], [77.5, 639.0], [77.6, 642.0], [77.7, 644.0], [77.8, 645.0], [77.9, 647.0], [78.0, 651.0], [78.1, 654.0], [78.2, 656.0], [78.3, 657.0], [78.4, 662.0], [78.5, 664.0], [78.6, 667.0], [78.7, 668.0], [78.8, 671.0], [78.9, 677.0], [79.0, 682.0], [79.1, 685.0], [79.2, 689.0], [79.3, 691.0], [79.4, 694.0], [79.5, 699.0], [79.6, 701.0], [79.7, 704.0], [79.8, 708.0], [79.9, 713.0], [80.0, 721.0], [80.1, 723.0], [80.2, 728.0], [80.3, 733.0], [80.4, 740.0], [80.5, 745.0], [80.6, 747.0], [80.7, 751.0], [80.8, 757.0], [80.9, 758.0], [81.0, 760.0], [81.1, 764.0], [81.2, 767.0], [81.3, 769.0], [81.4, 770.0], [81.5, 773.0], [81.6, 778.0], [81.7, 783.0], [81.8, 787.0], [81.9, 791.0], [82.0, 793.0], [82.1, 794.0], [82.2, 796.0], [82.3, 798.0], [82.4, 802.0], [82.5, 806.0], [82.6, 808.0], [82.7, 813.0], [82.8, 819.0], [82.9, 821.0], [83.0, 826.0], [83.1, 830.0], [83.2, 832.0], [83.3, 835.0], [83.4, 839.0], [83.5, 841.0], [83.6, 845.0], [83.7, 849.0], [83.8, 854.0], [83.9, 857.0], [84.0, 862.0], [84.1, 864.0], [84.2, 869.0], [84.3, 871.0], [84.4, 875.0], [84.5, 878.0], [84.6, 881.0], [84.7, 886.0], [84.8, 887.0], [84.9, 891.0], [85.0, 895.0], [85.1, 902.0], [85.2, 906.0], [85.3, 908.0], [85.4, 910.0], [85.5, 911.0], [85.6, 916.0], [85.7, 921.0], [85.8, 926.0], [85.9, 930.0], [86.0, 934.0], [86.1, 935.0], [86.2, 938.0], [86.3, 944.0], [86.4, 947.0], [86.5, 950.0], [86.6, 952.0], [86.7, 960.0], [86.8, 963.0], [86.9, 966.0], [87.0, 971.0], [87.1, 975.0], [87.2, 977.0], [87.3, 980.0], [87.4, 982.0], [87.5, 985.0], [87.6, 988.0], [87.7, 991.0], [87.8, 997.0], [87.9, 1000.0], [88.0, 1009.0], [88.1, 1012.0], [88.2, 1018.0], [88.3, 1027.0], [88.4, 1033.0], [88.5, 1037.0], [88.6, 1041.0], [88.7, 1047.0], [88.8, 1051.0], [88.9, 1054.0], [89.0, 1060.0], [89.1, 1066.0], [89.2, 1070.0], [89.3, 1074.0], [89.4, 1080.0], [89.5, 1081.0], [89.6, 1087.0], [89.7, 1090.0], [89.8, 1099.0], [89.9, 1104.0], [90.0, 1110.0], [90.1, 1114.0], [90.2, 1119.0], [90.3, 1123.0], [90.4, 1127.0], [90.5, 1135.0], [90.6, 1138.0], [90.7, 1142.0], [90.8, 1146.0], [90.9, 1149.0], [91.0, 1158.0], [91.1, 1164.0], [91.2, 1170.0], [91.3, 1178.0], [91.4, 1184.0], [91.5, 1190.0], [91.6, 1193.0], [91.7, 1200.0], [91.8, 1203.0], [91.9, 1211.0], [92.0, 1216.0], [92.1, 1223.0], [92.2, 1227.0], [92.3, 1235.0], [92.4, 1241.0], [92.5, 1248.0], [92.6, 1258.0], [92.7, 1263.0], [92.8, 1269.0], [92.9, 1273.0], [93.0, 1276.0], [93.1, 1280.0], [93.2, 1295.0], [93.3, 1298.0], [93.4, 1304.0], [93.5, 1314.0], [93.6, 1321.0], [93.7, 1329.0], [93.8, 1335.0], [93.9, 1354.0], [94.0, 1368.0], [94.1, 1385.0], [94.2, 1409.0], [94.3, 1424.0], [94.4, 1434.0], [94.5, 1445.0], [94.6, 1462.0], [94.7, 1473.0], [94.8, 1494.0], [94.9, 1518.0], [95.0, 1534.0], [95.1, 1542.0], [95.2, 1563.0], [95.3, 1578.0], [95.4, 1606.0], [95.5, 1626.0], [95.6, 1647.0], [95.7, 1660.0], [95.8, 1707.0], [95.9, 1745.0], [96.0, 1764.0], [96.1, 1792.0], [96.2, 1820.0], [96.3, 1830.0], [96.4, 1845.0], [96.5, 1867.0], [96.6, 1876.0], [96.7, 1894.0], [96.8, 1924.0], [96.9, 1951.0], [97.0, 1995.0], [97.1, 2036.0], [97.2, 2072.0], [97.3, 2094.0], [97.4, 2140.0], [97.5, 2164.0], [97.6, 2185.0], [97.7, 2209.0], [97.8, 2232.0], [97.9, 2269.0], [98.0, 2345.0], [98.1, 2403.0], [98.2, 2471.0], [98.3, 2506.0], [98.4, 2577.0], [98.5, 2643.0], [98.6, 2723.0], [98.7, 2770.0], [98.8, 2826.0], [98.9, 2863.0], [99.0, 2908.0], [99.1, 2943.0], [99.2, 2990.0], [99.3, 3040.0], [99.4, 3134.0], [99.5, 3189.0], [99.6, 3295.0], [99.7, 3451.0], [99.8, 3552.0], [99.9, 4015.0]], "isOverall": false, "label": "HTTP Request - Reserve", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 2577.0, "series": [{"data": [[600.0, 764.0], [9900.0, 3.0], [700.0, 432.0], [800.0, 293.0], [13100.0, 1.0], [900.0, 175.0], [1000.0, 207.0], [1100.0, 158.0], [1200.0, 119.0], [19000.0, 1.0], [1300.0, 109.0], [1400.0, 104.0], [1500.0, 88.0], [1600.0, 41.0], [1700.0, 39.0], [1800.0, 26.0], [1900.0, 30.0], [2000.0, 21.0], [2100.0, 22.0], [2200.0, 28.0], [2300.0, 28.0], [2400.0, 14.0], [2500.0, 9.0], [2600.0, 10.0], [2800.0, 17.0], [2700.0, 12.0], [2900.0, 8.0], [3000.0, 13.0], [3100.0, 6.0], [3200.0, 12.0], [3300.0, 17.0], [3400.0, 9.0], [3500.0, 5.0], [3700.0, 3.0], [3600.0, 1.0], [3800.0, 1.0], [3900.0, 2.0], [4100.0, 1.0], [400.0, 696.0], [6900.0, 1.0], [500.0, 2577.0]], "isOverall": false, "label": "HTTP Request - Index", "isController": false}, {"data": [[600.0, 187.0], [700.0, 156.0], [800.0, 151.0], [900.0, 156.0], [1000.0, 110.0], [1100.0, 102.0], [1200.0, 91.0], [1300.0, 46.0], [1400.0, 37.0], [1500.0, 31.0], [1600.0, 23.0], [1700.0, 19.0], [1800.0, 33.0], [1900.0, 16.0], [2000.0, 17.0], [2100.0, 20.0], [2300.0, 9.0], [2200.0, 14.0], [2400.0, 8.0], [2500.0, 11.0], [2600.0, 8.0], [2700.0, 10.0], [2800.0, 12.0], [2900.0, 14.0], [3000.0, 8.0], [3100.0, 9.0], [200.0, 2433.0], [3300.0, 5.0], [3200.0, 4.0], [3400.0, 2.0], [3500.0, 5.0], [3600.0, 2.0], [3900.0, 2.0], [4000.0, 2.0], [4300.0, 2.0], [4100.0, 1.0], [4200.0, 1.0], [300.0, 1004.0], [400.0, 520.0], [500.0, 274.0]], "isOverall": false, "label": "HTTP Request - Reserve", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 19000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3441.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1.500ms"], [2, "Requests having \nresponse time > 1.500ms"], [3, "Requests in error"]], "maxY": 8217.0, "series": [{"data": [[0.0, 3441.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1.500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1.500ms", "isController": false}, {"data": [[3.0, 8217.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 88.55436573311367, "minX": 1.67224464E12, "maxY": 235.4066449636147, "series": [{"data": [[1.67224464E12, 88.55436573311367], [1.6722447E12, 235.4066449636147]], "isOverall": false, "label": "Ult. Thread Group - Teste de Pico", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6722447E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 238.0, "minX": 1.0, "maxY": 13124.0, "series": [{"data": [[2.0, 13124.0], [4.0, 3377.5], [5.0, 3537.5], [6.0, 3864.0], [8.0, 3156.0], [10.0, 3096.0], [11.0, 1935.0], [12.0, 540.0], [13.0, 510.0], [14.0, 3398.5], [15.0, 3122.0], [16.0, 2931.0], [17.0, 2961.0], [18.0, 531.0], [20.0, 855.1666666666666], [21.0, 2684.4], [22.0, 521.0], [23.0, 537.0], [24.0, 2467.0], [25.0, 785.0], [27.0, 2283.0], [28.0, 1361.0], [29.0, 585.0], [31.0, 1467.0], [33.0, 2178.3333333333335], [32.0, 2119.0], [34.0, 1736.6666666666667], [35.0, 522.6666666666666], [36.0, 526.0], [37.0, 658.3333333333334], [38.0, 572.5], [39.0, 1334.6666666666665], [40.0, 1032.6666666666665], [41.0, 1307.5], [42.0, 601.5], [43.0, 1548.5], [45.0, 2260.0], [44.0, 3479.0], [46.0, 1154.4], [47.0, 979.7142857142858], [48.0, 544.3333333333334], [49.0, 1077.6], [50.0, 1049.5], [51.0, 1965.0], [52.0, 597.0], [53.0, 1968.5], [54.0, 644.3333333333334], [55.0, 607.5], [56.0, 1040.1666666666667], [57.0, 1059.3333333333333], [58.0, 1102.6666666666667], [59.0, 693.3333333333334], [60.0, 728.0], [61.0, 786.0], [62.0, 656.5714285714287], [63.0, 489.0], [64.0, 1229.3333333333335], [66.0, 631.7499999999999], [67.0, 875.8333333333333], [65.0, 519.0], [68.0, 644.2222222222222], [69.0, 805.8333333333333], [70.0, 973.25], [71.0, 1943.0], [72.0, 1040.2], [73.0, 1154.3333333333333], [75.0, 1020.0], [74.0, 484.0], [76.0, 873.8], [77.0, 741.6], [78.0, 633.8333333333334], [79.0, 638.0], [80.0, 1124.8333333333333], [81.0, 753.5], [82.0, 770.3], [84.0, 806.5], [85.0, 598.0], [86.0, 896.4285714285714], [87.0, 1053.5], [88.0, 987.25], [89.0, 667.4285714285713], [90.0, 894.8333333333334], [91.0, 599.3333333333334], [92.0, 1002.1111111111111], [93.0, 574.0], [94.0, 956.75], [95.0, 751.6], [96.0, 690.0], [97.0, 573.75], [98.0, 619.0], [99.0, 736.3], [100.0, 569.1895206243037], [103.0, 914.6923076923077], [102.0, 663.8823529411764], [101.0, 887.1428571428571], [104.0, 561.0000000000001], [105.0, 688.3076923076922], [106.0, 822.4999999999999], [107.0, 891.4285714285716], [108.0, 723.1875000000001], [109.0, 539.6315789473683], [110.0, 779.1818181818181], [111.0, 732.0555555555557], [113.0, 1057.2727272727273], [112.0, 846.3636363636364], [115.0, 606.0833333333334], [114.0, 947.4], [116.0, 1142.0], [119.0, 521.0769230769231], [118.0, 791.5000000000001], [117.0, 964.9285714285714], [120.0, 920.7142857142858], [122.0, 843.875], [123.0, 1061.25], [121.0, 961.4], [124.0, 861.125], [125.0, 1303.875], [127.0, 512.0], [126.0, 833.611111111111], [128.0, 518.1428571428571], [129.0, 649.4444444444443], [130.0, 528.7777777777778], [131.0, 711.0000000000001], [132.0, 1013.4285714285714], [133.0, 515.7777777777777], [134.0, 830.25], [135.0, 501.75], [143.0, 733.4545454545455], [139.0, 730.7777777777778], [138.0, 600.7857142857142], [137.0, 579.5555555555555], [136.0, 972.5], [142.0, 1287.857142857143], [141.0, 710.75], [140.0, 977.923076923077], [144.0, 1211.95], [151.0, 987.5454545454545], [150.0, 665.8], [149.0, 688.5], [148.0, 593.9], [147.0, 732.0], [145.0, 1038.6000000000001], [146.0, 524.6666666666666], [153.0, 845.5], [155.0, 720.4], [156.0, 838.9090909090909], [157.0, 1219.0], [158.0, 934.625], [159.0, 611.0], [152.0, 512.0], [154.0, 530.8], [160.0, 978.8888888888889], [161.0, 573.3076923076923], [162.0, 951.4444444444445], [163.0, 838.6666666666667], [164.0, 515.8571428571428], [165.0, 536.0833333333334], [166.0, 520.0], [167.0, 783.3333333333334], [168.0, 736.75], [169.0, 521.25], [170.0, 531.0000000000001], [172.0, 727.6], [173.0, 657.0], [174.0, 507.125], [175.0, 896.8], [171.0, 547.0], [176.0, 663.1428571428572], [177.0, 827.3846153846154], [178.0, 743.3076923076923], [179.0, 587.1739130434783], [180.0, 528.6666666666666], [181.0, 646.25], [183.0, 928.9090909090909], [182.0, 1041.0], [190.0, 816.0], [189.0, 601.875], [188.0, 754.0], [187.0, 721.8484848484849], [185.0, 594.1428571428571], [184.0, 776.2727272727273], [191.0, 740.5555555555555], [186.0, 779.6666666666666], [195.0, 692.6363636363635], [194.0, 785.3529411764707], [193.0, 724.4000000000001], [192.0, 738.5], [196.0, 811.6], [197.0, 734.5999999999999], [198.0, 604.1111111111111], [199.0, 760.5185185185186], [200.0, 711.3341404358366], [207.0, 770.25], [206.0, 696.2857142857142], [202.0, 1324.3333333333335], [205.0, 1074.0], [204.0, 2282.0], [201.0, 1151.5], [203.0, 1527.0], [212.0, 823.5555555555555], [215.0, 720.6], [214.0, 661.1666666666667], [211.0, 542.0], [210.0, 1050.5], [209.0, 739.4285714285713], [208.0, 1058.5], [219.0, 1352.5], [218.0, 933.0], [217.0, 1123.0], [216.0, 669.8], [220.0, 4777.666666666667], [223.0, 1438.0], [221.0, 1405.0], [224.0, 570.0], [226.0, 567.0], [227.0, 514.0], [228.0, 520.0], [230.0, 551.0], [231.0, 519.3333333333334], [232.0, 565.0], [233.0, 528.0], [234.0, 497.0], [236.0, 631.5], [239.0, 1316.0], [238.0, 1220.0], [237.0, 951.0], [240.0, 945.0], [244.0, 667.2], [246.0, 659.0], [247.0, 1957.5], [243.0, 752.8571428571429], [242.0, 1056.0], [241.0, 899.6666666666667], [245.0, 1492.0], [248.0, 739.0], [250.0, 844.0], [251.0, 960.3333333333333], [252.0, 673.0], [253.0, 1075.5], [254.0, 809.25], [255.0, 832.5], [249.0, 1961.0], [257.0, 2035.0], [256.0, 990.5], [258.0, 1036.25], [259.0, 858.0], [260.0, 679.1304347826086], [261.0, 1175.8], [262.0, 754.4], [263.0, 861.3333333333333], [264.0, 604.75], [269.0, 549.0], [268.0, 697.0], [270.0, 562.0], [265.0, 635.0], [266.0, 683.0], [284.0, 661.8333333333334], [275.0, 743.5], [274.0, 1865.0], [272.0, 766.3333333333334], [276.0, 643.0], [278.0, 606.3333333333334], [277.0, 1173.0], [279.0, 660.3333333333334], [281.0, 540.6], [282.0, 1101.6666666666667], [285.0, 542.4], [286.0, 1093.25], [287.0, 836.5], [280.0, 2342.6666666666665], [290.0, 534.5], [296.0, 706.3333333333334], [300.0, 868.9674620390456], [301.0, 551.0], [291.0, 547.0], [297.0, 813.7857142857143], [295.0, 629.25], [293.0, 1036.5], [292.0, 536.3333333333334], [289.0, 787.5], [288.0, 1099.5], [299.0, 1095.4705882352944], [294.0, 981.4999999999999], [317.0, 1028.5], [304.0, 2019.5], [305.0, 1511.0], [308.0, 574.0], [309.0, 494.0], [314.0, 1007.0], [319.0, 1439.0], [318.0, 1347.0], [315.0, 2420.0], [307.0, 1479.0], [306.0, 3449.0], [332.0, 595.0], [320.0, 565.0], [322.0, 1577.0], [321.0, 1357.0], [335.0, 566.0], [329.0, 1540.0], [328.0, 1462.0], [331.0, 1031.0], [330.0, 645.5], [327.0, 1114.5], [325.0, 1024.0], [326.0, 1536.0], [324.0, 567.0], [334.0, 1619.0], [349.0, 499.5], [350.0, 1096.5], [348.0, 852.0], [345.0, 607.5], [347.0, 1060.0], [346.0, 3067.0], [344.0, 500.5], [351.0, 1538.0], [343.0, 547.0], [340.0, 708.0], [339.0, 1016.5], [336.0, 951.0], [337.0, 1367.0], [353.0, 1535.0], [360.0, 606.6666666666666], [357.0, 646.0], [355.0, 893.0], [359.0, 935.5], [358.0, 1377.0], [356.0, 1526.0], [354.0, 1607.5], [352.0, 1532.0], [382.0, 1438.0], [376.0, 1824.0], [375.0, 716.5], [370.0, 561.1666666666667], [378.0, 1030.5], [377.0, 1458.0], [379.0, 1470.0], [381.0, 998.0], [369.0, 559.6666666666666], [383.0, 1456.0], [380.0, 1463.0], [387.0, 3253.0], [398.0, 583.0], [399.0, 623.0], [396.0, 667.3333333333334], [394.0, 609.5], [390.0, 733.4285714285714], [389.0, 3055.0], [388.0, 2441.0], [386.0, 1783.0], [385.0, 1245.0], [384.0, 1426.0], [414.0, 556.0], [402.0, 594.0], [403.0, 623.0], [413.0, 1189.6], [401.0, 797.0], [407.0, 682.0], [409.0, 678.0], [410.0, 578.5], [411.0, 1129.4], [415.0, 615.0], [408.0, 1134.0], [406.0, 1379.0], [428.0, 553.5], [418.0, 698.0], [419.0, 840.75], [420.0, 1025.5], [421.0, 769.6666666666666], [422.0, 715.0], [416.0, 1842.5], [426.0, 957.0], [425.0, 1010.6666666666666], [424.0, 1874.0], [429.0, 524.3333333333334], [430.0, 612.0], [439.0, 993.0], [434.0, 1185.2], [432.0, 1499.0], [436.0, 1137.5], [437.0, 639.0], [438.0, 809.6666666666666], [444.0, 717.0], [447.0, 1096.6], [441.0, 2135.0], [440.0, 1662.5], [446.0, 1347.8], [445.0, 512.0], [460.0, 789.0], [450.0, 826.0], [451.0, 620.0], [452.0, 669.5], [454.0, 913.0], [455.0, 1035.0], [449.0, 2862.0], [448.0, 1545.0], [463.0, 680.0], [459.0, 1123.0], [458.0, 1063.0], [456.0, 1569.0], [467.0, 518.0], [468.0, 596.0], [469.0, 502.0], [470.0, 546.0], [471.0, 781.0], [472.0, 776.0], [473.0, 1108.4], [475.0, 754.5], [474.0, 1007.0], [477.0, 508.0], [476.0, 2159.0], [492.0, 768.5], [480.0, 506.0], [481.0, 522.0], [482.0, 612.0], [483.0, 655.0], [486.0, 1019.75], [487.0, 1036.857142857143], [491.0, 732.0], [493.0, 907.0], [494.0, 871.25], [495.0, 911.0], [489.0, 1241.0], [499.0, 1146.814814814815], [500.0, 999.7287128712867], [497.0, 1433.0], [1.0, 11333.5]], "isOverall": false, "label": "HTTP Request - Index", "isController": false}, {"data": [[222.77879731279663, 800.4779616582032]], "isOverall": false, "label": "HTTP Request - Index-Aggregated", "isController": false}, {"data": [[3.0, 3012.0], [4.0, 2900.0], [5.0, 2954.0], [7.0, 3104.0], [8.0, 3693.0], [9.0, 3172.0], [10.0, 3016.0], [11.0, 2880.0], [12.0, 2839.0], [13.0, 3029.5], [15.0, 3258.0], [16.0, 245.0], [17.0, 238.0], [18.0, 1467.5], [19.0, 2577.0], [21.0, 2546.0], [22.0, 2147.0], [23.0, 2546.0], [24.0, 1499.6666666666667], [25.0, 1530.6666666666667], [26.0, 2074.75], [28.0, 1705.6666666666667], [29.0, 2257.5], [30.0, 2126.0], [31.0, 1881.0], [33.0, 282.0], [32.0, 3321.0], [34.0, 890.6666666666667], [35.0, 1215.5], [36.0, 2712.75], [37.0, 1359.5], [38.0, 1224.25], [39.0, 241.0], [40.0, 1331.3333333333333], [41.0, 1107.3333333333335], [42.0, 246.33333333333334], [43.0, 1788.5], [44.0, 743.6], [45.0, 243.5], [46.0, 387.0], [47.0, 984.0], [48.0, 388.0], [49.0, 2704.0], [50.0, 1607.5], [51.0, 1823.0], [52.0, 1019.25], [53.0, 305.75], [55.0, 822.1666666666666], [54.0, 2795.0], [56.0, 349.3333333333333], [57.0, 377.3333333333333], [58.0, 433.5], [59.0, 620.4], [60.0, 1185.6666666666665], [61.0, 1613.5], [63.0, 1817.0], [62.0, 1284.0], [64.0, 332.5], [65.0, 370.6666666666667], [66.0, 609.8333333333333], [67.0, 418.6666666666667], [68.0, 285.0], [69.0, 1357.0], [70.0, 812.6666666666667], [71.0, 314.4], [72.0, 547.625], [73.0, 1557.1666666666667], [74.0, 337.3333333333333], [75.0, 413.25], [76.0, 821.6666666666667], [77.0, 939.3333333333333], [78.0, 740.0], [79.0, 860.3333333333333], [80.0, 905.3333333333333], [81.0, 874.3333333333333], [82.0, 425.5], [83.0, 895.6666666666667], [84.0, 334.3333333333333], [85.0, 634.0], [86.0, 644.6666666666666], [87.0, 328.75], [88.0, 395.0], [89.0, 872.6666666666667], [90.0, 340.8], [91.0, 601.3333333333333], [92.0, 342.6666666666667], [93.0, 791.3333333333333], [94.0, 1087.5], [95.0, 778.0], [96.0, 370.6666666666667], [97.0, 374.0], [98.0, 298.4], [99.0, 390.3333333333333], [100.0, 297.70329670329716], [103.0, 562.0999999999999], [102.0, 465.13333333333344], [101.0, 367.1333333333333], [105.0, 258.5333333333333], [104.0, 647.0588235294117], [107.0, 563.6666666666667], [106.0, 261.6], [108.0, 496.2], [109.0, 502.48], [110.0, 925.5], [111.0, 476.10526315789474], [115.0, 769.0], [114.0, 558.9375], [113.0, 294.6666666666667], [112.0, 266.5], [119.0, 752.25], [116.0, 242.33333333333334], [117.0, 589.7599999999999], [118.0, 684.6923076923076], [120.0, 361.1764705882353], [121.0, 382.4000000000001], [122.0, 383.23076923076917], [123.0, 541.1333333333333], [124.0, 646.0], [125.0, 286.8333333333333], [126.0, 265.8461538461538], [127.0, 269.0], [128.0, 1244.0], [129.0, 447.33333333333326], [131.0, 258.0], [132.0, 251.5], [133.0, 886.3333333333334], [134.0, 272.86666666666673], [135.0, 778.3333333333334], [130.0, 649.0909090909091], [136.0, 332.6], [138.0, 595.9], [139.0, 541.3333333333333], [141.0, 640.1428571428571], [143.0, 477.590909090909], [142.0, 2608.0], [140.0, 560.2222222222222], [137.0, 869.2], [144.0, 388.07142857142856], [145.0, 896.0], [147.0, 410.25], [151.0, 685.0833333333334], [150.0, 571.2], [148.0, 428.5], [146.0, 739.5], [149.0, 477.8], [159.0, 820.1176470588235], [158.0, 268.4], [157.0, 794.3333333333334], [156.0, 273.5714285714286], [155.0, 481.25000000000006], [154.0, 860.6], [153.0, 511.6666666666667], [152.0, 351.1], [161.0, 416.0], [163.0, 254.5], [166.0, 1100.5], [165.0, 913.2], [164.0, 568.25], [162.0, 251.57142857142858], [160.0, 906.5], [167.0, 1085.0], [171.0, 553.1111111111111], [172.0, 522.8333333333334], [174.0, 1051.5], [175.0, 564.3333333333333], [170.0, 421.8181818181818], [169.0, 1394.6666666666665], [168.0, 241.0], [173.0, 261.25], [176.0, 328.5], [179.0, 294.08333333333337], [180.0, 578.5], [181.0, 461.1428571428571], [183.0, 1002.375], [177.0, 507.2307692307693], [178.0, 546.0666666666667], [182.0, 454.0], [185.0, 1089.25], [187.0, 443.77142857142854], [188.0, 372.94117647058823], [189.0, 1022.0], [190.0, 418.3571428571428], [191.0, 330.45454545454544], [186.0, 434.70000000000005], [184.0, 922.5], [192.0, 423.5], [197.0, 643.7272727272727], [198.0, 468.6666666666667], [199.0, 515.1333333333333], [195.0, 300.5], [194.0, 542.25], [193.0, 376.8], [196.0, 468.3], [200.0, 429.9162591687041], [203.0, 280.0], [206.0, 541.7142857142858], [207.0, 293.0], [204.0, 261.0], [201.0, 246.0], [202.0, 1215.0], [208.0, 295.0], [209.0, 301.0], [213.0, 1279.6666666666667], [215.0, 249.0], [218.0, 354.0], [219.0, 1423.0], [223.0, 312.0], [221.0, 1167.0], [217.0, 511.0], [222.0, 1452.0], [231.0, 253.0], [228.0, 254.0], [227.0, 284.0], [226.0, 318.5], [225.0, 281.0], [224.0, 1434.0], [236.0, 315.0], [233.0, 291.0], [237.0, 575.3571428571428], [239.0, 587.5], [240.0, 276.5], [243.0, 863.9999999999999], [241.0, 1031.0], [242.0, 323.3333333333333], [244.0, 1259.0], [246.0, 1221.0], [248.0, 1368.5], [250.0, 3302.5], [253.0, 1518.0], [271.0, 255.0], [267.0, 238.0], [270.0, 399.0], [268.0, 326.0], [266.0, 543.0], [265.0, 420.6666666666667], [264.0, 363.0], [263.0, 766.5], [259.0, 537.5], [258.0, 474.0], [262.0, 490.1666666666667], [261.0, 914.75], [260.0, 757.3333333333334], [284.0, 609.1428571428571], [276.0, 281.0], [277.0, 320.6], [278.0, 659.2222222222222], [279.0, 1213.0], [275.0, 303.0], [274.0, 668.0], [272.0, 1022.5], [282.0, 473.1666666666667], [283.0, 896.75], [285.0, 693.5], [286.0, 1170.0], [287.0, 750.0], [280.0, 502.42857142857144], [281.0, 1211.0], [303.0, 1354.0], [295.0, 561.7142857142858], [292.0, 291.5], [300.0, 638.2497187851516], [291.0, 1181.0], [290.0, 2672.0], [289.0, 1286.0], [288.0, 935.0], [302.0, 1231.0], [301.0, 1184.0], [299.0, 464.43749999999994], [298.0, 572.6], [297.0, 860.6666666666667], [293.0, 812.3333333333333], [294.0, 647.7500000000001], [317.0, 2688.0], [313.0, 2700.0], [312.0, 1325.0], [311.0, 1603.0], [310.0, 1327.0], [309.0, 1277.0], [335.0, 1193.0], [333.0, 1540.0], [332.0, 245.0], [330.0, 2627.0], [324.0, 1166.0], [323.0, 778.0], [320.0, 578.0], [349.0, 1175.0], [345.0, 1194.0], [344.0, 1184.0], [343.0, 1574.0], [342.0, 2661.0], [341.0, 699.0], [338.0, 1160.0], [375.0, 1272.0], [381.0, 482.0], [386.0, 547.0], [387.0, 836.6666666666667], [388.0, 1199.3333333333333], [389.0, 1037.0], [390.0, 1699.0], [411.0, 897.0], [415.0, 922.0], [414.0, 1193.0], [413.0, 1326.0], [410.0, 945.0], [409.0, 1192.0], [408.0, 1278.0], [407.0, 1233.0], [428.0, 364.5], [424.0, 257.0], [421.0, 666.5], [420.0, 1284.5], [423.0, 1140.0], [417.0, 1226.0], [416.0, 2781.0], [419.0, 909.0], [418.0, 1202.0], [422.0, 1381.0], [426.0, 568.0], [430.0, 541.0], [431.0, 982.0], [429.0, 1129.0], [427.0, 1198.0], [425.0, 259.0], [435.0, 857.0], [437.0, 286.0], [438.0, 659.0], [447.0, 1383.5], [446.0, 1064.0], [443.0, 1111.0], [442.0, 764.0], [436.0, 891.0], [448.0, 753.5], [457.0, 590.0], [458.0, 353.0], [456.0, 1054.0], [455.0, 583.0], [454.0, 1081.0], [453.0, 1199.0], [452.0, 380.0], [450.0, 991.0], [449.0, 1011.0], [466.0, 358.0], [467.0, 339.0], [469.0, 350.5], [478.0, 347.0], [471.0, 1035.8], [473.0, 1358.7142857142858], [474.0, 1874.5], [475.0, 1194.0], [476.0, 666.8], [495.0, 786.5], [482.0, 683.0], [487.0, 847.8571428571429], [481.0, 253.0], [486.0, 959.0], [484.0, 609.6666666666666], [491.0, 765.0], [494.0, 1027.8], [493.0, 413.0], [492.0, 759.0], [483.0, 858.0], [490.0, 1056.5], [489.0, 793.0], [488.0, 1263.0], [500.0, 711.583529411765], [499.0, 1174.875], [498.0, 2347.0], [497.0, 1203.0], [496.0, 526.0]], "isOverall": false, "label": "HTTP Request - Reserve", "isController": false}, {"data": [[217.18685868586877, 539.624482448245]], "isOverall": false, "label": "HTTP Request - Reserve-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2494.9666666666667, "minX": 1.67224464E12, "maxY": 1033922.45, "series": [{"data": [[1.67224464E12, 120474.76666666666], [1.6722447E12, 1033922.45]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.67224464E12, 2494.9666666666667], [1.6722447E12, 21441.016666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6722447E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 345.716723549488, "minX": 1.67224464E12, "maxY": 822.3996347031969, "series": [{"data": [[1.67224464E12, 609.361464968153], [1.6722447E12, 822.3996347031969]], "isOverall": false, "label": "HTTP Request - Index", "isController": false}, {"data": [[1.67224464E12, 345.716723549488], [1.6722447E12, 562.4922519621637]], "isOverall": false, "label": "HTTP Request - Reserve", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6722447E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 333.05290102389074, "minX": 1.67224464E12, "maxY": 800.1294977168956, "series": [{"data": [[1.67224464E12, 598.2611464968153], [1.6722447E12, 800.1294977168956]], "isOverall": false, "label": "HTTP Request - Index", "isController": false}, {"data": [[1.67224464E12, 333.05290102389074], [1.6722447E12, 549.7808412155376]], "isOverall": false, "label": "HTTP Request - Reserve", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6722447E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.67224464E12, "maxY": 279.06319634703095, "series": [{"data": [[1.67224464E12, 265.5477707006368], [1.6722447E12, 279.06319634703095]], "isOverall": false, "label": "HTTP Request - Index", "isController": false}, {"data": [[1.67224464E12, 0.0], [1.6722447E12, 0.1519420406520432]], "isOverall": false, "label": "HTTP Request - Reserve", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6722447E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 226.0, "minX": 1.67224464E12, "maxY": 400.0, "series": [{"data": [[1.67224464E12, 396.0], [1.6722447E12, 400.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.67224464E12, 368.0], [1.6722447E12, 350.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.67224464E12, 394.56], [1.6722447E12, 396.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.67224464E12, 385.79999999999995], [1.6722447E12, 374.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.67224464E12, 235.0], [1.6722447E12, 226.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.67224464E12, 280.0], [1.6722447E12, 271.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6722447E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 246.0, "minX": 1.0, "maxY": 16100.5, "series": [{"data": [[35.0, 276.0], [77.0, 286.5], [113.0, 255.5], [118.0, 278.0], [140.0, 330.0], [189.0, 324.0], [208.0, 255.0], [220.0, 255.0], [224.0, 291.0], [229.0, 255.0], [235.0, 254.0], [239.0, 270.0], [234.0, 261.0], [246.0, 266.0], [240.0, 278.0], [254.0, 259.0], [261.0, 275.0], [285.0, 310.5], [284.0, 283.5], [273.0, 247.0], [298.0, 270.0], [302.0, 286.0], [311.0, 249.0], [312.0, 251.5], [316.0, 250.0], [305.0, 246.0], [321.0, 272.0], [331.0, 253.5], [334.0, 285.0], [338.0, 286.5], [348.0, 297.0], [343.0, 316.0], [366.0, 312.0], [364.0, 291.0], [358.0, 308.0], [377.0, 286.0], [379.0, 331.5], [394.0, 318.0], [435.0, 320.0], [468.0, 326.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[35.0, 552.0], [3.0, 526.0], [48.0, 542.0], [50.0, 3385.5], [77.0, 542.0], [101.0, 1825.0], [113.0, 513.0], [118.0, 592.0], [140.0, 600.0], [9.0, 2954.0], [189.0, 587.5], [208.0, 541.0], [220.0, 522.0], [224.0, 542.0], [229.0, 512.0], [235.0, 512.0], [239.0, 520.0], [234.0, 530.0], [246.0, 522.0], [240.0, 534.0], [254.0, 513.0], [261.0, 530.5], [1.0, 16100.5], [285.0, 592.0], [284.0, 587.0], [273.0, 1452.5], [298.0, 540.0], [302.0, 616.0], [311.0, 556.0], [312.0, 545.5], [316.0, 553.0], [305.0, 533.0], [321.0, 578.5], [331.0, 570.0], [334.0, 879.0], [20.0, 2655.0], [338.0, 540.0], [348.0, 569.0], [343.0, 697.0], [366.0, 831.0], [364.0, 545.0], [358.0, 582.0], [377.0, 672.5], [379.0, 1073.0], [394.0, 786.5], [435.0, 628.0], [468.0, 976.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 468.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 3375.5, "series": [{"data": [[35.0, 263.0], [77.0, 274.5], [113.0, 241.0], [118.0, 265.0], [140.0, 318.0], [189.0, 312.0], [208.0, 244.0], [220.0, 240.5], [224.0, 277.0], [229.0, 241.0], [235.0, 241.0], [239.0, 259.0], [234.0, 248.0], [246.0, 254.0], [240.0, 263.5], [254.0, 247.0], [261.0, 263.0], [285.0, 299.5], [284.0, 271.5], [273.0, 235.0], [298.0, 259.0], [302.0, 275.0], [311.0, 235.5], [312.0, 239.0], [316.0, 237.0], [305.0, 233.0], [321.0, 259.0], [331.0, 241.0], [334.0, 274.0], [338.0, 274.0], [348.0, 281.0], [343.0, 304.0], [366.0, 294.0], [364.0, 279.0], [358.0, 295.0], [377.0, 274.0], [379.0, 319.0], [394.0, 304.5], [435.0, 308.0], [468.0, 315.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[35.0, 545.0], [3.0, 514.0], [48.0, 531.5], [50.0, 3375.5], [77.0, 534.0], [101.0, 1812.0], [113.0, 502.0], [118.0, 579.0], [140.0, 588.0], [9.0, 2941.0], [189.0, 577.5], [208.0, 530.0], [220.0, 510.5], [224.0, 530.0], [229.0, 499.5], [235.0, 502.0], [239.0, 509.0], [234.0, 519.0], [246.0, 511.0], [240.0, 522.0], [254.0, 502.0], [261.0, 521.0], [1.0, 0.0], [285.0, 581.0], [284.0, 577.0], [273.0, 1441.0], [298.0, 528.0], [302.0, 605.0], [311.0, 550.0], [312.0, 535.5], [316.0, 541.0], [305.0, 523.0], [321.0, 567.0], [331.0, 559.0], [334.0, 866.0], [20.0, 2641.5], [338.0, 530.0], [348.0, 557.0], [343.0, 689.0], [366.0, 814.0], [364.0, 534.0], [358.0, 572.0], [377.0, 665.5], [379.0, 1063.0], [394.0, 775.5], [435.0, 617.0], [468.0, 964.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 468.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 21.9, "minX": 1.67224464E12, "maxY": 172.4, "series": [{"data": [[1.67224464E12, 21.9], [1.6722447E12, 172.4]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6722447E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.67224464E12, "maxY": 173.98333333333332, "series": [{"data": [[1.67224464E12, 20.233333333333334], [1.6722447E12, 173.98333333333332]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6722447E12, 0.08333333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6722447E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.3833333333333333, "minX": 1.67224464E12, "maxY": 91.25, "series": [{"data": [[1.67224464E12, 2.3833333333333333], [1.6722447E12, 32.85]], "isOverall": false, "label": "HTTP Request - Reserve-failure", "isController": false}, {"data": [[1.67224464E12, 10.466666666666667], [1.6722447E12, 91.25]], "isOverall": false, "label": "HTTP Request - Index-failure", "isController": false}, {"data": [[1.67224464E12, 7.383333333333334], [1.6722447E12, 49.96666666666667]], "isOverall": false, "label": "HTTP Request - Reserve-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6722447E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 7.383333333333334, "minX": 1.67224464E12, "maxY": 124.1, "series": [{"data": [[1.67224464E12, 7.383333333333334], [1.6722447E12, 49.96666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.67224464E12, 12.85], [1.6722447E12, 124.1]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6722447E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

