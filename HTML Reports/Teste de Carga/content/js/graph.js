/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 59379.0, "series": [{"data": [[0.0, 1.0], [0.1, 3.0], [0.2, 4.0], [0.3, 7.0], [0.4, 13.0], [0.5, 17.0], [0.6, 20.0], [0.7, 22.0], [0.8, 24.0], [0.9, 25.0], [1.0, 28.0], [1.1, 30.0], [1.2, 32.0], [1.3, 35.0], [1.4, 38.0], [1.5, 40.0], [1.6, 43.0], [1.7, 45.0], [1.8, 47.0], [1.9, 51.0], [2.0, 53.0], [2.1, 54.0], [2.2, 56.0], [2.3, 57.0], [2.4, 60.0], [2.5, 62.0], [2.6, 65.0], [2.7, 67.0], [2.8, 68.0], [2.9, 71.0], [3.0, 74.0], [3.1, 75.0], [3.2, 77.0], [3.3, 78.0], [3.4, 80.0], [3.5, 83.0], [3.6, 85.0], [3.7, 88.0], [3.8, 90.0], [3.9, 92.0], [4.0, 94.0], [4.1, 96.0], [4.2, 97.0], [4.3, 98.0], [4.4, 100.0], [4.5, 102.0], [4.6, 104.0], [4.7, 106.0], [4.8, 108.0], [4.9, 110.0], [5.0, 112.0], [5.1, 113.0], [5.2, 115.0], [5.3, 117.0], [5.4, 119.0], [5.5, 121.0], [5.6, 121.0], [5.7, 122.0], [5.8, 123.0], [5.9, 125.0], [6.0, 126.0], [6.1, 127.0], [6.2, 128.0], [6.3, 129.0], [6.4, 131.0], [6.5, 132.0], [6.6, 134.0], [6.7, 135.0], [6.8, 136.0], [6.9, 138.0], [7.0, 141.0], [7.1, 142.0], [7.2, 143.0], [7.3, 145.0], [7.4, 147.0], [7.5, 149.0], [7.6, 151.0], [7.7, 152.0], [7.8, 153.0], [7.9, 154.0], [8.0, 155.0], [8.1, 157.0], [8.2, 158.0], [8.3, 159.0], [8.4, 160.0], [8.5, 161.0], [8.6, 162.0], [8.7, 163.0], [8.8, 165.0], [8.9, 167.0], [9.0, 169.0], [9.1, 171.0], [9.2, 172.0], [9.3, 173.0], [9.4, 174.0], [9.5, 175.0], [9.6, 177.0], [9.7, 178.0], [9.8, 180.0], [9.9, 181.0], [10.0, 182.0], [10.1, 183.0], [10.2, 184.0], [10.3, 186.0], [10.4, 187.0], [10.5, 188.0], [10.6, 189.0], [10.7, 190.0], [10.8, 191.0], [10.9, 193.0], [11.0, 194.0], [11.1, 196.0], [11.2, 198.0], [11.3, 200.0], [11.4, 201.0], [11.5, 203.0], [11.6, 204.0], [11.7, 205.0], [11.8, 206.0], [11.9, 207.0], [12.0, 208.0], [12.1, 209.0], [12.2, 210.0], [12.3, 211.0], [12.4, 213.0], [12.5, 214.0], [12.6, 215.0], [12.7, 216.0], [12.8, 218.0], [12.9, 219.0], [13.0, 221.0], [13.1, 222.0], [13.2, 224.0], [13.3, 226.0], [13.4, 227.0], [13.5, 229.0], [13.6, 231.0], [13.7, 232.0], [13.8, 233.0], [13.9, 236.0], [14.0, 237.0], [14.1, 239.0], [14.2, 242.0], [14.3, 244.0], [14.4, 245.0], [14.5, 247.0], [14.6, 249.0], [14.7, 251.0], [14.8, 252.0], [14.9, 254.0], [15.0, 256.0], [15.1, 258.0], [15.2, 259.0], [15.3, 260.0], [15.4, 262.0], [15.5, 264.0], [15.6, 265.0], [15.7, 267.0], [15.8, 269.0], [15.9, 270.0], [16.0, 272.0], [16.1, 273.0], [16.2, 274.0], [16.3, 276.0], [16.4, 278.0], [16.5, 279.0], [16.6, 281.0], [16.7, 281.0], [16.8, 283.0], [16.9, 284.0], [17.0, 286.0], [17.1, 289.0], [17.2, 292.0], [17.3, 294.0], [17.4, 297.0], [17.5, 298.0], [17.6, 300.0], [17.7, 302.0], [17.8, 303.0], [17.9, 305.0], [18.0, 306.0], [18.1, 308.0], [18.2, 309.0], [18.3, 309.0], [18.4, 310.0], [18.5, 311.0], [18.6, 313.0], [18.7, 315.0], [18.8, 317.0], [18.9, 319.0], [19.0, 320.0], [19.1, 322.0], [19.2, 323.0], [19.3, 326.0], [19.4, 327.0], [19.5, 329.0], [19.6, 330.0], [19.7, 332.0], [19.8, 333.0], [19.9, 334.0], [20.0, 336.0], [20.1, 338.0], [20.2, 339.0], [20.3, 340.0], [20.4, 341.0], [20.5, 342.0], [20.6, 344.0], [20.7, 344.0], [20.8, 345.0], [20.9, 347.0], [21.0, 348.0], [21.1, 348.0], [21.2, 349.0], [21.3, 350.0], [21.4, 352.0], [21.5, 354.0], [21.6, 355.0], [21.7, 356.0], [21.8, 357.0], [21.9, 358.0], [22.0, 359.0], [22.1, 360.0], [22.2, 361.0], [22.3, 363.0], [22.4, 365.0], [22.5, 367.0], [22.6, 369.0], [22.7, 372.0], [22.8, 373.0], [22.9, 375.0], [23.0, 378.0], [23.1, 380.0], [23.2, 382.0], [23.3, 385.0], [23.4, 386.0], [23.5, 387.0], [23.6, 389.0], [23.7, 390.0], [23.8, 392.0], [23.9, 394.0], [24.0, 395.0], [24.1, 397.0], [24.2, 399.0], [24.3, 400.0], [24.4, 401.0], [24.5, 403.0], [24.6, 404.0], [24.7, 406.0], [24.8, 408.0], [24.9, 409.0], [25.0, 411.0], [25.1, 412.0], [25.2, 415.0], [25.3, 416.0], [25.4, 418.0], [25.5, 419.0], [25.6, 421.0], [25.7, 423.0], [25.8, 427.0], [25.9, 429.0], [26.0, 431.0], [26.1, 433.0], [26.2, 434.0], [26.3, 436.0], [26.4, 438.0], [26.5, 440.0], [26.6, 442.0], [26.7, 444.0], [26.8, 447.0], [26.9, 449.0], [27.0, 450.0], [27.1, 451.0], [27.2, 453.0], [27.3, 455.0], [27.4, 456.0], [27.5, 458.0], [27.6, 460.0], [27.7, 462.0], [27.8, 464.0], [27.9, 466.0], [28.0, 468.0], [28.1, 470.0], [28.2, 472.0], [28.3, 474.0], [28.4, 475.0], [28.5, 477.0], [28.6, 479.0], [28.7, 480.0], [28.8, 482.0], [28.9, 483.0], [29.0, 484.0], [29.1, 485.0], [29.2, 486.0], [29.3, 486.0], [29.4, 487.0], [29.5, 488.0], [29.6, 489.0], [29.7, 489.0], [29.8, 490.0], [29.9, 491.0], [30.0, 491.0], [30.1, 492.0], [30.2, 492.0], [30.3, 493.0], [30.4, 494.0], [30.5, 494.0], [30.6, 495.0], [30.7, 495.0], [30.8, 496.0], [30.9, 496.0], [31.0, 497.0], [31.1, 497.0], [31.2, 497.0], [31.3, 498.0], [31.4, 498.0], [31.5, 499.0], [31.6, 500.0], [31.7, 500.0], [31.8, 501.0], [31.9, 501.0], [32.0, 501.0], [32.1, 502.0], [32.2, 502.0], [32.3, 503.0], [32.4, 503.0], [32.5, 503.0], [32.6, 504.0], [32.7, 504.0], [32.8, 505.0], [32.9, 505.0], [33.0, 506.0], [33.1, 506.0], [33.2, 507.0], [33.3, 507.0], [33.4, 508.0], [33.5, 508.0], [33.6, 509.0], [33.7, 509.0], [33.8, 510.0], [33.9, 510.0], [34.0, 511.0], [34.1, 511.0], [34.2, 512.0], [34.3, 513.0], [34.4, 513.0], [34.5, 514.0], [34.6, 514.0], [34.7, 515.0], [34.8, 515.0], [34.9, 516.0], [35.0, 516.0], [35.1, 517.0], [35.2, 518.0], [35.3, 518.0], [35.4, 519.0], [35.5, 520.0], [35.6, 521.0], [35.7, 521.0], [35.8, 522.0], [35.9, 522.0], [36.0, 523.0], [36.1, 523.0], [36.2, 524.0], [36.3, 525.0], [36.4, 525.0], [36.5, 526.0], [36.6, 527.0], [36.7, 527.0], [36.8, 528.0], [36.9, 529.0], [37.0, 529.0], [37.1, 530.0], [37.2, 531.0], [37.3, 531.0], [37.4, 532.0], [37.5, 532.0], [37.6, 533.0], [37.7, 534.0], [37.8, 535.0], [37.9, 536.0], [38.0, 537.0], [38.1, 537.0], [38.2, 538.0], [38.3, 539.0], [38.4, 540.0], [38.5, 541.0], [38.6, 542.0], [38.7, 542.0], [38.8, 543.0], [38.9, 544.0], [39.0, 545.0], [39.1, 545.0], [39.2, 546.0], [39.3, 547.0], [39.4, 548.0], [39.5, 548.0], [39.6, 549.0], [39.7, 550.0], [39.8, 551.0], [39.9, 552.0], [40.0, 552.0], [40.1, 553.0], [40.2, 554.0], [40.3, 555.0], [40.4, 556.0], [40.5, 557.0], [40.6, 558.0], [40.7, 559.0], [40.8, 559.0], [40.9, 560.0], [41.0, 561.0], [41.1, 562.0], [41.2, 563.0], [41.3, 564.0], [41.4, 565.0], [41.5, 565.0], [41.6, 566.0], [41.7, 567.0], [41.8, 567.0], [41.9, 568.0], [42.0, 569.0], [42.1, 570.0], [42.2, 571.0], [42.3, 572.0], [42.4, 573.0], [42.5, 574.0], [42.6, 575.0], [42.7, 576.0], [42.8, 577.0], [42.9, 578.0], [43.0, 579.0], [43.1, 580.0], [43.2, 581.0], [43.3, 582.0], [43.4, 583.0], [43.5, 585.0], [43.6, 586.0], [43.7, 588.0], [43.8, 588.0], [43.9, 590.0], [44.0, 592.0], [44.1, 593.0], [44.2, 594.0], [44.3, 595.0], [44.4, 597.0], [44.5, 599.0], [44.6, 600.0], [44.7, 602.0], [44.8, 604.0], [44.9, 605.0], [45.0, 606.0], [45.1, 607.0], [45.2, 609.0], [45.3, 610.0], [45.4, 612.0], [45.5, 614.0], [45.6, 616.0], [45.7, 617.0], [45.8, 619.0], [45.9, 622.0], [46.0, 624.0], [46.1, 627.0], [46.2, 630.0], [46.3, 633.0], [46.4, 635.0], [46.5, 637.0], [46.6, 640.0], [46.7, 643.0], [46.8, 646.0], [46.9, 648.0], [47.0, 650.0], [47.1, 653.0], [47.2, 656.0], [47.3, 658.0], [47.4, 661.0], [47.5, 664.0], [47.6, 666.0], [47.7, 668.0], [47.8, 671.0], [47.9, 673.0], [48.0, 676.0], [48.1, 678.0], [48.2, 680.0], [48.3, 682.0], [48.4, 684.0], [48.5, 685.0], [48.6, 688.0], [48.7, 691.0], [48.8, 694.0], [48.9, 697.0], [49.0, 699.0], [49.1, 700.0], [49.2, 701.0], [49.3, 703.0], [49.4, 707.0], [49.5, 710.0], [49.6, 711.0], [49.7, 713.0], [49.8, 716.0], [49.9, 717.0], [50.0, 720.0], [50.1, 724.0], [50.2, 726.0], [50.3, 728.0], [50.4, 730.0], [50.5, 731.0], [50.6, 733.0], [50.7, 737.0], [50.8, 740.0], [50.9, 743.0], [51.0, 747.0], [51.1, 750.0], [51.2, 752.0], [51.3, 756.0], [51.4, 760.0], [51.5, 762.0], [51.6, 764.0], [51.7, 768.0], [51.8, 772.0], [51.9, 776.0], [52.0, 780.0], [52.1, 783.0], [52.2, 787.0], [52.3, 790.0], [52.4, 793.0], [52.5, 797.0], [52.6, 799.0], [52.7, 802.0], [52.8, 804.0], [52.9, 804.0], [53.0, 806.0], [53.1, 809.0], [53.2, 811.0], [53.3, 813.0], [53.4, 815.0], [53.5, 817.0], [53.6, 819.0], [53.7, 822.0], [53.8, 825.0], [53.9, 827.0], [54.0, 829.0], [54.1, 831.0], [54.2, 832.0], [54.3, 834.0], [54.4, 836.0], [54.5, 838.0], [54.6, 841.0], [54.7, 844.0], [54.8, 845.0], [54.9, 847.0], [55.0, 848.0], [55.1, 849.0], [55.2, 851.0], [55.3, 852.0], [55.4, 854.0], [55.5, 855.0], [55.6, 857.0], [55.7, 860.0], [55.8, 862.0], [55.9, 864.0], [56.0, 865.0], [56.1, 867.0], [56.2, 869.0], [56.3, 871.0], [56.4, 872.0], [56.5, 873.0], [56.6, 874.0], [56.7, 876.0], [56.8, 877.0], [56.9, 879.0], [57.0, 882.0], [57.1, 883.0], [57.2, 884.0], [57.3, 886.0], [57.4, 887.0], [57.5, 888.0], [57.6, 889.0], [57.7, 891.0], [57.8, 892.0], [57.9, 893.0], [58.0, 895.0], [58.1, 897.0], [58.2, 899.0], [58.3, 901.0], [58.4, 902.0], [58.5, 903.0], [58.6, 905.0], [58.7, 906.0], [58.8, 908.0], [58.9, 909.0], [59.0, 910.0], [59.1, 911.0], [59.2, 912.0], [59.3, 913.0], [59.4, 914.0], [59.5, 915.0], [59.6, 916.0], [59.7, 918.0], [59.8, 919.0], [59.9, 921.0], [60.0, 923.0], [60.1, 924.0], [60.2, 926.0], [60.3, 928.0], [60.4, 930.0], [60.5, 932.0], [60.6, 935.0], [60.7, 936.0], [60.8, 938.0], [60.9, 940.0], [61.0, 942.0], [61.1, 943.0], [61.2, 945.0], [61.3, 947.0], [61.4, 949.0], [61.5, 951.0], [61.6, 953.0], [61.7, 955.0], [61.8, 957.0], [61.9, 958.0], [62.0, 960.0], [62.1, 962.0], [62.2, 963.0], [62.3, 965.0], [62.4, 967.0], [62.5, 969.0], [62.6, 971.0], [62.7, 971.0], [62.8, 973.0], [62.9, 975.0], [63.0, 976.0], [63.1, 977.0], [63.2, 979.0], [63.3, 981.0], [63.4, 982.0], [63.5, 984.0], [63.6, 985.0], [63.7, 987.0], [63.8, 988.0], [63.9, 989.0], [64.0, 990.0], [64.1, 992.0], [64.2, 993.0], [64.3, 994.0], [64.4, 997.0], [64.5, 999.0], [64.6, 999.0], [64.7, 1000.0], [64.8, 1001.0], [64.9, 1003.0], [65.0, 1005.0], [65.1, 1008.0], [65.2, 1009.0], [65.3, 1010.0], [65.4, 1012.0], [65.5, 1013.0], [65.6, 1014.0], [65.7, 1016.0], [65.8, 1018.0], [65.9, 1022.0], [66.0, 1024.0], [66.1, 1026.0], [66.2, 1028.0], [66.3, 1031.0], [66.4, 1032.0], [66.5, 1037.0], [66.6, 1040.0], [66.7, 1041.0], [66.8, 1044.0], [66.9, 1047.0], [67.0, 1048.0], [67.1, 1050.0], [67.2, 1054.0], [67.3, 1057.0], [67.4, 1061.0], [67.5, 1065.0], [67.6, 1068.0], [67.7, 1073.0], [67.8, 1078.0], [67.9, 1083.0], [68.0, 1087.0], [68.1, 1090.0], [68.2, 1095.0], [68.3, 1098.0], [68.4, 1103.0], [68.5, 1108.0], [68.6, 1110.0], [68.7, 1114.0], [68.8, 1115.0], [68.9, 1117.0], [69.0, 1119.0], [69.1, 1122.0], [69.2, 1125.0], [69.3, 1128.0], [69.4, 1133.0], [69.5, 1138.0], [69.6, 1142.0], [69.7, 1146.0], [69.8, 1148.0], [69.9, 1153.0], [70.0, 1157.0], [70.1, 1163.0], [70.2, 1170.0], [70.3, 1175.0], [70.4, 1183.0], [70.5, 1189.0], [70.6, 1193.0], [70.7, 1196.0], [70.8, 1202.0], [70.9, 1207.0], [71.0, 1213.0], [71.1, 1220.0], [71.2, 1222.0], [71.3, 1229.0], [71.4, 1236.0], [71.5, 1245.0], [71.6, 1255.0], [71.7, 1265.0], [71.8, 1273.0], [71.9, 1283.0], [72.0, 1288.0], [72.1, 1296.0], [72.2, 1308.0], [72.3, 1319.0], [72.4, 1329.0], [72.5, 1345.0], [72.6, 1362.0], [72.7, 1379.0], [72.8, 1399.0], [72.9, 1412.0], [73.0, 1434.0], [73.1, 1450.0], [73.2, 1468.0], [73.3, 1485.0], [73.4, 1493.0], [73.5, 1498.0], [73.6, 1501.0], [73.7, 1503.0], [73.8, 1507.0], [73.9, 1509.0], [74.0, 1512.0], [74.1, 1514.0], [74.2, 1517.0], [74.3, 1520.0], [74.4, 1524.0], [74.5, 1526.0], [74.6, 1530.0], [74.7, 1534.0], [74.8, 1538.0], [74.9, 1542.0], [75.0, 1545.0], [75.1, 1550.0], [75.2, 1554.0], [75.3, 1558.0], [75.4, 1561.0], [75.5, 1566.0], [75.6, 1571.0], [75.7, 1576.0], [75.8, 1582.0], [75.9, 1587.0], [76.0, 1594.0], [76.1, 1602.0], [76.2, 1609.0], [76.3, 1616.0], [76.4, 1624.0], [76.5, 1632.0], [76.6, 1641.0], [76.7, 1652.0], [76.8, 1662.0], [76.9, 1670.0], [77.0, 1680.0], [77.1, 1691.0], [77.2, 1704.0], [77.3, 1717.0], [77.4, 1728.0], [77.5, 1739.0], [77.6, 1749.0], [77.7, 1762.0], [77.8, 1775.0], [77.9, 1792.0], [78.0, 1805.0], [78.1, 1819.0], [78.2, 1837.0], [78.3, 1854.0], [78.4, 1869.0], [78.5, 1887.0], [78.6, 1903.0], [78.7, 1920.0], [78.8, 1941.0], [78.9, 1959.0], [79.0, 1979.0], [79.1, 2004.0], [79.2, 2028.0], [79.3, 2046.0], [79.4, 2064.0], [79.5, 2088.0], [79.6, 2110.0], [79.7, 2130.0], [79.8, 2147.0], [79.9, 2170.0], [80.0, 2192.0], [80.1, 2213.0], [80.2, 2234.0], [80.3, 2254.0], [80.4, 2274.0], [80.5, 2291.0], [80.6, 2313.0], [80.7, 2337.0], [80.8, 2360.0], [80.9, 2371.0], [81.0, 2394.0], [81.1, 2413.0], [81.2, 2433.0], [81.3, 2451.0], [81.4, 2466.0], [81.5, 2484.0], [81.6, 2498.0], [81.7, 2515.0], [81.8, 2532.0], [81.9, 2540.0], [82.0, 2545.0], [82.1, 2547.0], [82.2, 2548.0], [82.3, 2550.0], [82.4, 2553.0], [82.5, 2556.0], [82.6, 2559.0], [82.7, 2561.0], [82.8, 2563.0], [82.9, 2566.0], [83.0, 2569.0], [83.1, 2572.0], [83.2, 2574.0], [83.3, 2575.0], [83.4, 2577.0], [83.5, 2578.0], [83.6, 2579.0], [83.7, 2580.0], [83.8, 2581.0], [83.9, 2583.0], [84.0, 2585.0], [84.1, 2586.0], [84.2, 2593.0], [84.3, 2597.0], [84.4, 2599.0], [84.5, 2603.0], [84.6, 2605.0], [84.7, 2607.0], [84.8, 2610.0], [84.9, 2612.0], [85.0, 2613.0], [85.1, 2614.0], [85.2, 2616.0], [85.3, 2617.0], [85.4, 2618.0], [85.5, 2620.0], [85.6, 2623.0], [85.7, 2624.0], [85.8, 2625.0], [85.9, 2626.0], [86.0, 2626.0], [86.1, 2627.0], [86.2, 2628.0], [86.3, 2630.0], [86.4, 2632.0], [86.5, 2637.0], [86.6, 2645.0], [86.7, 2652.0], [86.8, 2658.0], [86.9, 2664.0], [87.0, 2671.0], [87.1, 2677.0], [87.2, 2681.0], [87.3, 2682.0], [87.4, 2683.0], [87.5, 2684.0], [87.6, 2686.0], [87.7, 2689.0], [87.8, 2692.0], [87.9, 2697.0], [88.0, 2702.0], [88.1, 2706.0], [88.2, 2709.0], [88.3, 2711.0], [88.4, 2715.0], [88.5, 2718.0], [88.6, 2720.0], [88.7, 2723.0], [88.8, 2726.0], [88.9, 2727.0], [89.0, 2728.0], [89.1, 2729.0], [89.2, 2732.0], [89.3, 2734.0], [89.4, 2736.0], [89.5, 2739.0], [89.6, 2742.0], [89.7, 2744.0], [89.8, 2745.0], [89.9, 2746.0], [90.0, 2747.0], [90.1, 2749.0], [90.2, 2751.0], [90.3, 2753.0], [90.4, 2757.0], [90.5, 2761.0], [90.6, 2765.0], [90.7, 2768.0], [90.8, 2770.0], [90.9, 2774.0], [91.0, 2777.0], [91.1, 2784.0], [91.2, 2795.0], [91.3, 2832.0], [91.4, 2879.0], [91.5, 2927.0], [91.6, 2999.0], [91.7, 3048.0], [91.8, 3096.0], [91.9, 3149.0], [92.0, 3240.0], [92.1, 3362.0], [92.2, 3501.0], [92.3, 3510.0], [92.4, 3516.0], [92.5, 3522.0], [92.6, 3529.0], [92.7, 3539.0], [92.8, 3548.0], [92.9, 3557.0], [93.0, 3565.0], [93.1, 3575.0], [93.2, 3587.0], [93.3, 3599.0], [93.4, 3619.0], [93.5, 3633.0], [93.6, 3659.0], [93.7, 3695.0], [93.8, 3745.0], [93.9, 3812.0], [94.0, 3917.0], [94.1, 4018.0], [94.2, 4126.0], [94.3, 4267.0], [94.4, 4443.0], [94.5, 4623.0], [94.6, 4793.0], [94.7, 5031.0], [94.8, 5319.0], [94.9, 5659.0], [95.0, 5925.0], [95.1, 6246.0], [95.2, 6906.0], [95.3, 7498.0], [95.4, 7521.0], [95.5, 7529.0], [95.6, 7538.0], [95.7, 7547.0], [95.8, 7560.0], [95.9, 7570.0], [96.0, 7586.0], [96.1, 7606.0], [96.2, 7629.0], [96.3, 7666.0], [96.4, 7731.0], [96.5, 7831.0], [96.6, 7943.0], [96.7, 8199.0], [96.8, 8737.0], [96.9, 9830.0], [97.0, 10699.0], [97.1, 12920.0], [97.2, 15517.0], [97.3, 15531.0], [97.4, 15541.0], [97.5, 15554.0], [97.6, 15567.0], [97.7, 15583.0], [97.8, 15602.0], [97.9, 15625.0], [98.0, 15667.0], [98.1, 15749.0], [98.2, 16041.0], [98.3, 17760.0], [98.4, 20824.0], [98.5, 21561.0], [98.6, 21666.0], [98.7, 21914.0], [98.8, 22375.0], [98.9, 22554.0], [99.0, 22609.0], [99.1, 22792.0], [99.2, 24070.0], [99.3, 24602.0], [99.4, 25022.0], [99.5, 28566.0], [99.6, 28734.0], [99.7, 36560.0], [99.8, 36815.0], [99.9, 43393.0]], "isOverall": false, "label": "HTTP Request - Index", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 8594.0, "series": [{"data": [[0.0, 2886.0], [100.0, 4594.0], [34900.0, 1.0], [36500.0, 28.0], [36900.0, 5.0], [37300.0, 1.0], [38100.0, 1.0], [42500.0, 1.0], [42900.0, 3.0], [43700.0, 6.0], [43300.0, 5.0], [44500.0, 1.0], [44100.0, 1.0], [44900.0, 1.0], [45700.0, 4.0], [46100.0, 1.0], [49700.0, 1.0], [200.0, 4164.0], [51700.0, 1.0], [59300.0, 1.0], [300.0, 4433.0], [400.0, 4849.0], [500.0, 8594.0], [600.0, 2975.0], [700.0, 2377.0], [800.0, 3709.0], [900.0, 4232.0], [1000.0, 2464.0], [1100.0, 1617.0], [1200.0, 905.0], [1300.0, 450.0], [1400.0, 497.0], [1500.0, 1664.0], [1600.0, 729.0], [1700.0, 519.0], [1800.0, 411.0], [1900.0, 341.0], [2000.0, 307.0], [2100.0, 319.0], [2200.0, 329.0], [2300.0, 332.0], [2400.0, 383.0], [2500.0, 1860.0], [2600.0, 2345.0], [2800.0, 145.0], [2700.0, 2168.0], [2900.0, 104.0], [3000.0, 137.0], [3100.0, 110.0], [3200.0, 49.0], [3300.0, 49.0], [3400.0, 49.0], [3500.0, 733.0], [3600.0, 273.0], [3700.0, 109.0], [3800.0, 68.0], [3900.0, 67.0], [4000.0, 61.0], [4100.0, 50.0], [4300.0, 34.0], [4200.0, 46.0], [4500.0, 33.0], [4400.0, 40.0], [4600.0, 37.0], [4700.0, 45.0], [4800.0, 32.0], [5100.0, 20.0], [4900.0, 26.0], [5000.0, 23.0], [5300.0, 21.0], [5200.0, 22.0], [5400.0, 25.0], [5600.0, 22.0], [5500.0, 14.0], [5800.0, 28.0], [5700.0, 23.0], [6100.0, 15.0], [5900.0, 22.0], [6000.0, 28.0], [6300.0, 14.0], [6200.0, 14.0], [6400.0, 12.0], [6500.0, 9.0], [6600.0, 7.0], [6900.0, 15.0], [6800.0, 11.0], [6700.0, 7.0], [7000.0, 15.0], [7100.0, 12.0], [7400.0, 11.0], [7200.0, 11.0], [7300.0, 3.0], [7500.0, 511.0], [7600.0, 188.0], [7800.0, 59.0], [7700.0, 80.0], [7900.0, 45.0], [8100.0, 17.0], [8000.0, 28.0], [8600.0, 16.0], [8500.0, 5.0], [8400.0, 17.0], [8700.0, 12.0], [8200.0, 12.0], [8300.0, 9.0], [8800.0, 7.0], [9100.0, 6.0], [9000.0, 10.0], [9200.0, 8.0], [8900.0, 5.0], [9500.0, 9.0], [9600.0, 4.0], [9400.0, 3.0], [9300.0, 2.0], [9700.0, 5.0], [9900.0, 31.0], [10200.0, 4.0], [10000.0, 7.0], [9800.0, 9.0], [10100.0, 2.0], [10400.0, 6.0], [10500.0, 2.0], [10700.0, 5.0], [10300.0, 5.0], [10600.0, 2.0], [10900.0, 8.0], [11100.0, 3.0], [10800.0, 8.0], [11200.0, 3.0], [11000.0, 2.0], [11400.0, 5.0], [11300.0, 1.0], [11600.0, 1.0], [11800.0, 8.0], [11900.0, 1.0], [12200.0, 2.0], [12100.0, 1.0], [12000.0, 1.0], [12600.0, 1.0], [12700.0, 4.0], [12500.0, 2.0], [12400.0, 3.0], [12300.0, 4.0], [12900.0, 9.0], [12800.0, 2.0], [13200.0, 1.0], [13100.0, 4.0], [13300.0, 1.0], [13000.0, 2.0], [13700.0, 1.0], [13600.0, 1.0], [13500.0, 1.0], [14300.0, 1.0], [14200.0, 2.0], [14000.0, 1.0], [13900.0, 2.0], [14100.0, 1.0], [14700.0, 1.0], [15200.0, 1.0], [15100.0, 1.0], [15700.0, 58.0], [15500.0, 421.0], [15600.0, 178.0], [15800.0, 29.0], [15400.0, 2.0], [16000.0, 8.0], [16100.0, 10.0], [15900.0, 10.0], [16200.0, 3.0], [16300.0, 2.0], [17400.0, 4.0], [17000.0, 2.0], [17200.0, 1.0], [16400.0, 3.0], [16600.0, 3.0], [16800.0, 3.0], [18400.0, 1.0], [17800.0, 3.0], [18000.0, 2.0], [17600.0, 1.0], [18200.0, 1.0], [19200.0, 1.0], [18800.0, 2.0], [18600.0, 3.0], [19400.0, 2.0], [19600.0, 2.0], [20000.0, 1.0], [19800.0, 3.0], [20400.0, 3.0], [20200.0, 2.0], [20800.0, 2.0], [20600.0, 2.0], [21400.0, 4.0], [21200.0, 1.0], [21000.0, 1.0], [21600.0, 50.0], [21800.0, 28.0], [22200.0, 6.0], [22000.0, 16.0], [22400.0, 10.0], [22600.0, 63.0], [22800.0, 7.0], [23000.0, 8.0], [23400.0, 3.0], [23200.0, 5.0], [24000.0, 1.0], [24400.0, 2.0], [23600.0, 3.0], [23800.0, 3.0], [24200.0, 2.0], [24600.0, 46.0], [25400.0, 1.0], [25000.0, 2.0], [24800.0, 5.0], [25200.0, 4.0], [25600.0, 3.0], [26600.0, 3.0], [26400.0, 1.0], [26200.0, 2.0], [25800.0, 2.0], [26000.0, 2.0], [27600.0, 2.0], [26800.0, 3.0], [27200.0, 4.0], [27400.0, 3.0], [28600.0, 40.0], [27800.0, 1.0], [29400.0, 2.0], [29600.0, 2.0], [28800.0, 4.0], [29000.0, 3.0], [30000.0, 3.0], [30200.0, 2.0], [31000.0, 3.0], [31600.0, 1.0], [32400.0, 1.0], [31800.0, 1.0], [32000.0, 1.0], [32200.0, 1.0], [36800.0, 4.0], [37600.0, 1.0], [40000.0, 1.0], [42800.0, 13.0], [43600.0, 6.0], [44000.0, 3.0], [43200.0, 7.0], [44800.0, 1.0], [45600.0, 3.0], [46000.0, 1.0], [49600.0, 4.0], [50000.0, 1.0], [57600.0, 3.0], [33900.0, 2.0], [36700.0, 9.0], [37100.0, 1.0], [39100.0, 2.0], [39500.0, 1.0], [41100.0, 1.0], [43500.0, 5.0], [43900.0, 2.0], [43100.0, 6.0], [44300.0, 1.0], [45900.0, 2.0], [49500.0, 1.0], [55900.0, 1.0], [57500.0, 1.0], [16500.0, 2.0], [17100.0, 2.0], [17300.0, 3.0], [16900.0, 8.0], [16700.0, 10.0], [17500.0, 3.0], [18100.0, 5.0], [18300.0, 3.0], [17700.0, 1.0], [17900.0, 1.0], [19100.0, 2.0], [19300.0, 2.0], [18700.0, 3.0], [18500.0, 3.0], [18900.0, 2.0], [19500.0, 2.0], [19700.0, 6.0], [19900.0, 2.0], [20300.0, 3.0], [20100.0, 1.0], [21500.0, 85.0], [20700.0, 2.0], [21100.0, 1.0], [20900.0, 2.0], [21700.0, 24.0], [22500.0, 110.0], [21900.0, 14.0], [22100.0, 22.0], [22300.0, 12.0], [22700.0, 18.0], [22900.0, 13.0], [23100.0, 4.0], [23300.0, 5.0], [23500.0, 2.0], [24500.0, 54.0], [24300.0, 2.0], [23900.0, 3.0], [23700.0, 5.0], [24100.0, 4.0], [24700.0, 12.0], [24900.0, 5.0], [25100.0, 1.0], [26500.0, 1.0], [25700.0, 4.0], [25900.0, 1.0], [26100.0, 1.0], [27500.0, 2.0], [27300.0, 1.0], [26700.0, 3.0], [27700.0, 2.0], [28500.0, 35.0], [27900.0, 1.0], [28100.0, 1.0], [28700.0, 12.0], [29300.0, 1.0], [29100.0, 1.0], [28900.0, 6.0], [30100.0, 3.0], [29900.0, 1.0], [30700.0, 1.0], [29700.0, 2.0], [30300.0, 1.0], [31500.0, 3.0], [31300.0, 3.0], [30900.0, 2.0], [31900.0, 1.0], [32300.0, 1.0], [33800.0, 1.0], [36600.0, 36.0], [37000.0, 2.0], [37400.0, 1.0], [40200.0, 2.0], [42600.0, 6.0], [43000.0, 3.0], [43400.0, 7.0], [43800.0, 1.0], [44600.0, 1.0], [47000.0, 1.0], [49800.0, 3.0], [52600.0, 1.0]], "isOverall": false, "label": "HTTP Request - Index", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 59300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 66268.0, "minX": 3.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1.500ms"], [2, "Requests having \nresponse time > 1.500ms"], [3, "Requests in error"]], "maxY": 66268.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1.500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1.500ms", "isController": false}, {"data": [[3.0, 66268.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1168.4167508494845, "minX": 1.67224434E12, "maxY": 1172.8485346431014, "series": [{"data": [[1.67224434E12, 1168.4167508494845], [1.6722444E12, 1172.8485346431014]], "isOverall": false, "label": "Ult. Thread Group - Teste de Carga", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6722444E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.8571428571428572, "minX": 1.0, "maxY": 6564.5, "series": [{"data": [[2.0, 4.0], [3.0, 3.0000000000000004], [4.0, 6.5], [5.0, 9.538461538461537], [6.0, 5.92857142857143], [7.0, 11.142857142857144], [8.0, 12.181818181818182], [9.0, 24.0], [10.0, 20.71428571428571], [11.0, 11.875], [12.0, 13.666666666666666], [13.0, 13.249999999999998], [14.0, 15.846153846153847], [15.0, 14.315789473684212], [16.0, 32.0], [17.0, 33.285714285714285], [18.0, 37.18181818181818], [19.0, 38.0], [20.0, 37.36363636363637], [21.0, 37.833333333333336], [22.0, 23.478260869565215], [23.0, 25.799999999999997], [24.0, 24.058823529411768], [25.0, 46.25], [26.0, 45.0], [27.0, 47.333333333333336], [28.0, 49.07692307692308], [29.0, 35.111111111111114], [30.0, 34.8], [31.0, 37.55555555555556], [33.0, 44.99999999999999], [32.0, 46.333333333333336], [35.0, 24.5], [34.0, 30.75], [37.0, 45.529411764705884], [36.0, 31.062500000000004], [39.0, 41.25], [38.0, 71.0], [41.0, 21.444444444444443], [40.0, 18.333333333333332], [42.0, 142.75], [43.0, 75.08333333333333], [45.0, 129.5625], [44.0, 35.27777777777777], [46.0, 143.11111111111111], [47.0, 137.07142857142858], [48.0, 164.8], [49.0, 211.66666666666669], [51.0, 26.333333333333332], [50.0, 37.94594594594595], [53.0, 39.714285714285715], [52.0, 40.333333333333336], [55.0, 92.80645161290322], [54.0, 62.8125], [56.0, 102.61538461538461], [57.0, 64.0], [59.0, 30.333333333333336], [58.0, 50.68750000000001], [60.0, 157.5], [61.0, 381.5], [63.0, 50.39130434782609], [62.0, 75.0], [66.0, 462.3333333333333], [67.0, 119.0], [65.0, 106.11111111111111], [64.0, 50.68750000000001], [69.0, 125.0384615384615], [70.0, 199.3], [71.0, 444.0], [68.0, 116.66666666666667], [72.0, 235.42857142857142], [75.0, 313.0], [74.0, 137.625], [73.0, 130.0], [76.0, 306.16666666666663], [77.0, 180.22222222222223], [78.0, 124.86206896551722], [79.0, 270.6666666666667], [82.0, 77.1212121212121], [83.0, 254.33333333333334], [81.0, 86.4], [80.0, 85.0], [85.0, 211.83333333333331], [87.0, 83.59420289855072], [86.0, 87.6], [84.0, 64.0], [88.0, 429.0], [89.0, 314.85714285714283], [91.0, 157.27272727272728], [90.0, 157.0], [92.0, 399.0], [93.0, 260.25], [94.0, 310.6666666666667], [95.0, 112.49019607843137], [96.0, 171.93749999999997], [97.0, 137.0909090909091], [98.0, 137.54545454545453], [99.0, 154.46153846153845], [100.0, 132.58333333333331], [101.0, 80.42857142857143], [102.0, 164.14285714285714], [103.0, 191.8], [105.0, 183.83333333333334], [106.0, 82.81578947368422], [107.0, 132.24999999999997], [104.0, 51.03409090909091], [109.0, 48.859374999999986], [110.0, 172.0], [111.0, 109.04347826086956], [108.0, 41.84615384615385], [112.0, 294.83333333333326], [114.0, 117.39534883720934], [115.0, 162.70270270270265], [113.0, 78.0], [116.0, 509.33333333333337], [117.0, 155.23529411764704], [118.0, 246.0], [119.0, 136.99999999999997], [120.0, 140.92592592592592], [121.0, 155.09756097560975], [122.0, 198.59999999999997], [123.0, 426.09090909090907], [124.0, 507.33333333333337], [125.0, 429.6], [127.0, 198.36363636363637], [126.0, 107.57894736842107], [128.0, 250.0], [129.0, 95.08571428571427], [130.0, 106.0909090909091], [131.0, 271.44444444444446], [132.0, 396.0], [133.0, 230.60000000000002], [134.0, 206.99999999999997], [135.0, 258.62500000000006], [136.0, 232.73076923076923], [137.0, 258.5], [138.0, 252.38461538461544], [140.0, 642.0], [141.0, 328.85714285714283], [142.0, 383.0], [143.0, 282.5], [139.0, 210.25], [144.0, 412.16666666666663], [145.0, 281.95000000000005], [147.0, 267.1290322580645], [148.0, 288.22222222222223], [149.0, 253.75], [150.0, 277.6], [151.0, 320.6666666666667], [146.0, 236.0], [152.0, 240.6428571428572], [153.0, 182.91666666666669], [154.0, 154.91666666666666], [155.0, 194.15384615384616], [157.0, 142.3714285714286], [158.0, 527.0], [159.0, 213.82758620689654], [156.0, 113.21428571428571], [160.0, 1006.0476190476192], [162.0, 298.76923076923083], [163.0, 382.0], [164.0, 794.25], [165.0, 418.57142857142867], [166.0, 427.25], [167.0, 798.0], [161.0, 191.2], [169.0, 356.99999999999994], [170.0, 284.36842105263156], [173.0, 237.60465116279073], [174.0, 556.0], [175.0, 665.2], [172.0, 159.3571428571429], [171.0, 211.81355932203394], [176.0, 225.16666666666666], [177.0, 140.58823529411765], [178.0, 711.0], [179.0, 183.09090909090912], [180.0, 229.03125000000006], [181.0, 727.5], [182.0, 275.6000000000001], [183.0, 268.2962962962964], [184.0, 389.0], [185.0, 395.73333333333335], [186.0, 289.0499999999999], [187.0, 296.8], [188.0, 398.9285714285714], [189.0, 307.7692307692307], [190.0, 453.4444444444445], [191.0, 459.5833333333333], [192.0, 342.375], [193.0, 350.7142857142857], [194.0, 444.81818181818187], [195.0, 350.25], [196.0, 324.5], [197.0, 299.4761904761905], [198.0, 426.5833333333333], [199.0, 214.4], [200.0, 444.85714285714283], [201.0, 215.57142857142858], [202.0, 342.8], [203.0, 356.2142857142857], [204.0, 355.90909090909093], [205.0, 309.9655172413793], [206.0, 528.9000000000001], [207.0, 157.32142857142856], [208.0, 451.25], [209.0, 150.6315789473684], [210.0, 309.3888888888889], [211.0, 550.125], [212.0, 537.3333333333334], [214.0, 243.66666666666666], [215.0, 177.83333333333334], [213.0, 117.4166666666667], [216.0, 180.49090909090904], [217.0, 275.3478260869565], [218.0, 668.5], [219.0, 745.2], [220.0, 669.6666666666666], [221.0, 527.8333333333334], [222.0, 664.6666666666666], [223.0, 582.75], [224.0, 154.50485436893211], [225.0, 170.0810810810811], [226.0, 326.11764705882354], [227.0, 344.4117647058824], [228.0, 355.94117647058823], [229.0, 191.1111111111112], [230.0, 220.33333333333334], [231.0, 378.0], [232.0, 222.15151515151518], [233.0, 614.8333333333334], [234.0, 502.70588235294116], [236.0, 176.70666666666668], [237.0, 445.0], [238.0, 276.66666666666663], [239.0, 274.2258064516128], [235.0, 160.3571428571429], [240.0, 292.88000000000005], [241.0, 668.875], [242.0, 303.8695652173913], [244.0, 354.8695652173913], [245.0, 389.9], [246.0, 394.6153846153846], [247.0, 380.72727272727275], [243.0, 214.04761904761907], [248.0, 480.0], [249.0, 714.2], [250.0, 622.2], [251.0, 538.875], [252.0, 321.25925925925924], [253.0, 359.78571428571433], [254.0, 389.71428571428567], [255.0, 327.8500000000001], [257.0, 227.9122807017544], [256.0, 266.6388888888889], [258.0, 228.28260869565213], [259.0, 344.00000000000006], [260.0, 209.78461538461542], [261.0, 361.5555555555555], [262.0, 407.5833333333333], [263.0, 283.7096774193548], [264.0, 835.0], [270.0, 337.11764705882354], [271.0, 519.3333333333334], [268.0, 544.0], [269.0, 487.75000000000006], [265.0, 498.6666666666667], [266.0, 423.18181818181824], [267.0, 320.909090909091], [273.0, 273.46153846153845], [272.0, 389.9230769230769], [274.0, 404.8636363636364], [275.0, 424.7826086956522], [276.0, 518.1], [277.0, 547.6923076923077], [278.0, 590.8], [279.0, 569.8571428571429], [280.0, 459.1363636363637], [286.0, 504.5], [287.0, 564.0], [284.0, 1494.9375], [285.0, 771.25], [281.0, 517.9999999999999], [282.0, 475.8461538461538], [283.0, 557.1428571428571], [289.0, 627.0], [288.0, 442.5384615384616], [290.0, 486.2], [291.0, 562.8181818181819], [292.0, 485.59999999999997], [293.0, 395.9642857142856], [295.0, 492.66666666666663], [294.0, 366.07692307692304], [296.0, 489.50000000000006], [302.0, 432.0], [303.0, 368.2173913043478], [300.0, 477.8], [301.0, 439.64000000000004], [297.0, 539.1874999999999], [298.0, 582.8888888888889], [299.0, 522.0], [305.0, 665.4], [304.0, 747.8], [306.0, 371.6521739130434], [307.0, 1157.0], [308.0, 431.11764705882354], [309.0, 429.31250000000006], [310.0, 351.14705882352945], [311.0, 693.4166666666667], [312.0, 388.235294117647], [318.0, 381.2857142857142], [319.0, 444.1111111111111], [316.0, 593.0909090909091], [317.0, 485.4117647058824], [313.0, 478.75], [314.0, 406.2857142857143], [315.0, 503.125], [321.0, 404.2], [320.0, 441.17391304347825], [322.0, 443.6], [323.0, 356.88571428571413], [324.0, 410.8888888888889], [325.0, 693.5000000000001], [326.0, 483.0], [327.0, 451.6923076923077], [328.0, 515.1538461538462], [334.0, 649.5], [335.0, 618.0], [332.0, 496.66666666666663], [333.0, 579.4285714285714], [329.0, 518.4], [330.0, 449.6785714285714], [331.0, 438.57142857142856], [337.0, 415.95238095238096], [336.0, 433.30769230769226], [338.0, 483.8666666666666], [339.0, 372.6842105263157], [340.0, 415.2222222222222], [341.0, 508.19047619047615], [342.0, 351.7105263157894], [343.0, 588.1111111111111], [344.0, 375.5333333333333], [350.0, 426.19444444444446], [351.0, 531.8333333333333], [348.0, 746.4], [349.0, 773.5], [345.0, 378.2], [346.0, 381.07692307692304], [347.0, 388.5217391304347], [353.0, 451.3], [352.0, 512.0], [354.0, 741.8333333333333], [355.0, 424.99999999999994], [356.0, 368.1081081081082], [357.0, 403.94117647058823], [358.0, 391.33333333333337], [359.0, 635.5454545454545], [360.0, 525.1428571428571], [366.0, 377.4782608695652], [367.0, 504.55555555555554], [364.0, 586.0000000000001], [365.0, 336.8536585365853], [361.0, 599.6666666666666], [362.0, 638.3749999999999], [363.0, 318.6500000000001], [369.0, 439.77142857142866], [368.0, 537.9], [370.0, 448.30769230769226], [371.0, 1322.6666666666667], [372.0, 424.3333333333333], [373.0, 535.6923076923078], [374.0, 620.9166666666666], [375.0, 441.8], [376.0, 408.71428571428567], [382.0, 472.71428571428567], [383.0, 401.16666666666674], [380.0, 524.3], [381.0, 334.5625], [377.0, 565.625], [378.0, 600.4375], [379.0, 389.03389830508485], [385.0, 668.5], [384.0, 571.0], [386.0, 623.0], [387.0, 731.8], [388.0, 436.53846153846155], [389.0, 339.6571428571428], [390.0, 557.5714285714283], [391.0, 373.5], [392.0, 318.56410256410254], [398.0, 381.3888888888889], [399.0, 357.78947368421063], [396.0, 325.16666666666663], [397.0, 470.125], [393.0, 955.8], [394.0, 713.6666666666666], [395.0, 399.5], [401.0, 483.125], [400.0, 685.3333333333334], [402.0, 446.23529411764713], [403.0, 358.26666666666665], [404.0, 331.4285714285714], [405.0, 337.78787878787875], [406.0, 354.76923076923066], [407.0, 346.2258064516129], [408.0, 312.6818181818181], [414.0, 786.6666666666666], [415.0, 532.0000000000001], [412.0, 302.6875000000001], [413.0, 345.5454545454545], [409.0, 1143.5], [410.0, 262.3103448275862], [411.0, 682.75], [417.0, 416.5185185185186], [416.0, 291.5], [418.0, 531.8], [419.0, 246.66666666666674], [420.0, 225.2463768115942], [421.0, 306.891891891892], [422.0, 262.2352941176471], [423.0, 285.67924528301876], [424.0, 427.61538461538464], [430.0, 578.8333333333334], [431.0, 297.2285714285714], [428.0, 514.125], [429.0, 854.6666666666666], [425.0, 504.8888888888889], [426.0, 378.7142857142857], [427.0, 455.49999999999994], [433.0, 521.4000000000001], [432.0, 582.0769230769232], [434.0, 404.0], [435.0, 225.06722689075636], [436.0, 151.75409836065586], [437.0, 844.0], [438.0, 378.2], [439.0, 319.1363636363637], [440.0, 277.5217391304348], [446.0, 307.0555555555557], [447.0, 251.99999999999994], [444.0, 213.6842105263158], [445.0, 317.5925925925925], [441.0, 357.40000000000003], [442.0, 235.36619718309856], [443.0, 280.3018867924529], [449.0, 303.71428571428567], [448.0, 274.14285714285717], [450.0, 193.08823529411768], [451.0, 349.2142857142857], [452.0, 378.76190476190476], [453.0, 306.8979591836735], [454.0, 378.12121212121224], [455.0, 318.9714285714286], [456.0, 577.375], [462.0, 230.6521739130435], [463.0, 496.6956521739129], [460.0, 284.5], [461.0, 449.33333333333337], [457.0, 255.38461538461533], [458.0, 271.19999999999993], [459.0, 223.875], [466.0, 339.87499999999994], [465.0, 501.9047619047618], [464.0, 260.0], [467.0, 655.2499999999999], [476.0, 1628.6666666666667], [477.0, 499.44444444444446], [478.0, 625.7500000000001], [479.0, 921.5], [472.0, 337.74418604651163], [468.0, 426.94736842105266], [469.0, 374.98113207547175], [470.0, 409.2765957446807], [471.0, 642.4736842105264], [473.0, 392.44444444444446], [474.0, 521.6521739130434], [475.0, 575.2], [481.0, 526.3888888888889], [480.0, 622.1666666666667], [482.0, 526.4999999999999], [483.0, 650.8571428571429], [484.0, 534.2857142857142], [485.0, 512.6875], [486.0, 459.3793103448276], [487.0, 620.1666666666667], [488.0, 447.6136363636363], [494.0, 565.6363636363636], [495.0, 615.5909090909091], [492.0, 509.6969696969697], [493.0, 562.2727272727273], [489.0, 469.4594594594595], [490.0, 511.27027027027043], [491.0, 593.0952380952382], [497.0, 435.55555555555554], [496.0, 1311.6], [498.0, 507.76190476190476], [499.0, 423.41666666666663], [500.0, 614.1739130434784], [501.0, 478.4814814814815], [502.0, 531.0], [503.0, 479.60714285714295], [504.0, 472.6666666666667], [510.0, 667.2], [511.0, 941.3333333333333], [508.0, 1179.6666666666667], [509.0, 1198.1818181818182], [505.0, 490.5294117647059], [506.0, 618.8636363636364], [507.0, 445.0526315789474], [515.0, 579.5517241379309], [512.0, 366.2000000000001], [526.0, 482.27272727272725], [527.0, 676.5], [524.0, 423.74999999999994], [525.0, 526.2666666666667], [522.0, 477.3333333333333], [523.0, 541.8333333333333], [513.0, 639.3333333333334], [514.0, 413.2608695652174], [516.0, 512.8214285714286], [517.0, 496.5], [518.0, 765.25], [519.0, 503.12], [528.0, 420.73333333333335], [542.0, 533.6], [543.0, 554.1777777777777], [540.0, 638.0833333333334], [541.0, 671.6818181818182], [538.0, 801.0], [539.0, 612.1923076923075], [536.0, 636.1999999999999], [537.0, 1468.125], [529.0, 516.9444444444446], [530.0, 1053.6666666666665], [531.0, 549.9000000000001], [532.0, 525.84], [533.0, 734.8499999999999], [535.0, 537.4], [534.0, 475.5000000000001], [520.0, 643.2], [521.0, 414.125], [547.0, 469.9090909090909], [544.0, 592.8888888888889], [558.0, 536.7105263157894], [559.0, 635.875], [556.0, 620.4], [557.0, 572.5], [554.0, 771.3076923076922], [555.0, 560.6666666666667], [545.0, 581.4615384615385], [546.0, 878.3125], [548.0, 538.3181818181818], [549.0, 632.2307692307693], [550.0, 534.4000000000001], [551.0, 435.4285714285714], [560.0, 502.0222222222223], [574.0, 454.4666666666667], [575.0, 499.9807692307693], [572.0, 423.3571428571429], [573.0, 493.75], [570.0, 526.4999999999999], [571.0, 534.5], [568.0, 449.7857142857142], [569.0, 572.4166666666666], [561.0, 448.93749999999994], [562.0, 438.25], [563.0, 440.73333333333346], [564.0, 567.7272727272729], [565.0, 374.5714285714286], [566.0, 602.0], [567.0, 729.5555555555555], [552.0, 562.6764705882355], [553.0, 711.8214285714286], [579.0, 753.4285714285714], [576.0, 557.5263157894735], [590.0, 815.0000000000001], [591.0, 569.372093023256], [588.0, 600.8888888888889], [589.0, 932.9333333333335], [586.0, 789.8333333333333], [587.0, 656.2499999999999], [577.0, 668.8461538461539], [578.0, 1919.6666666666665], [580.0, 527.4285714285714], [581.0, 704.8], [582.0, 502.0714285714285], [583.0, 588.2307692307693], [592.0, 576.85], [606.0, 698.6296296296298], [607.0, 534.1578947368421], [604.0, 624.4666666666667], [605.0, 917.6666666666666], [602.0, 590.0357142857143], [603.0, 1228.0], [600.0, 550.5333333333335], [601.0, 534.9599999999999], [593.0, 781.2857142857143], [594.0, 655.1499999999999], [595.0, 588.9459459459462], [596.0, 769.5454545454545], [597.0, 684.7142857142857], [598.0, 970.7142857142858], [599.0, 1233.6190476190473], [584.0, 703.3571428571429], [585.0, 1341.7142857142858], [615.0, 584.0], [611.0, 610.4444444444445], [608.0, 764.7142857142858], [621.0, 590.2941176470588], [622.0, 472.47826086956525], [623.0, 1116.6153846153843], [618.0, 562.5833333333333], [619.0, 474.0], [620.0, 549.0740740740741], [609.0, 733.9444444444445], [610.0, 820.4074074074073], [612.0, 573.2105263157895], [613.0, 1113.8333333333333], [614.0, 627.7777777777778], [624.0, 1414.5], [638.0, 525.7142857142858], [639.0, 1899.8], [636.0, 1391.25], [637.0, 578.6521739130436], [634.0, 2371.6666666666665], [635.0, 824.4374999999998], [632.0, 611.3584905660376], [633.0, 1510.0], [625.0, 741.9411764705883], [626.0, 544.2999999999998], [627.0, 490.0101010101011], [628.0, 640.8461538461538], [629.0, 392.2727272727273], [630.0, 435.1190476190476], [631.0, 1341.4], [616.0, 638.1111111111111], [617.0, 655.6562499999999], [646.0, 853.4615384615383], [642.0, 1423.5714285714287], [641.0, 1094.7500000000002], [640.0, 447.3999999999999], [654.0, 804.3333333333335], [655.0, 891.7777777777778], [652.0, 793.578947368421], [653.0, 605.7142857142857], [650.0, 726.4615384615383], [651.0, 879.7777777777776], [643.0, 772.4400000000003], [644.0, 1055.25], [645.0, 598.5853658536585], [647.0, 1416.3333333333333], [664.0, 526.9375], [665.0, 695.5], [666.0, 786.8333333333334], [667.0, 769.7894736842106], [668.0, 542.4516129032255], [669.0, 823.2727272727273], [670.0, 720.9565217391305], [671.0, 594.0], [656.0, 989.9333333333335], [658.0, 837.1666666666667], [657.0, 566.3000000000001], [659.0, 1182.1], [660.0, 1566.6153846153845], [661.0, 1132.5882352941176], [662.0, 730.6428571428571], [663.0, 554.868131868132], [648.0, 576.7894736842104], [649.0, 516.9285714285711], [675.0, 919.7142857142857], [672.0, 641.8518518518517], [686.0, 672.8571428571428], [687.0, 703.2222222222222], [684.0, 1328.5], [685.0, 597.9459459459457], [682.0, 768.8666666666667], [683.0, 510.1428571428571], [673.0, 602.8461538461538], [674.0, 1039.3333333333333], [676.0, 650.9599999999999], [677.0, 1129.8333333333333], [678.0, 761.9333333333333], [679.0, 583.9374999999998], [688.0, 545.9354838709678], [702.0, 844.7441860465115], [703.0, 467.72727272727275], [700.0, 502.21621621621625], [701.0, 676.6857142857141], [698.0, 819.2], [699.0, 1247.1250000000002], [696.0, 1502.4], [697.0, 507.54545454545456], [689.0, 1077.5000000000002], [690.0, 548.9718309859157], [691.0, 1063.888888888889], [692.0, 525.6666666666669], [693.0, 804.8888888888889], [694.0, 468.3125], [695.0, 753.6666666666666], [680.0, 735.9375], [681.0, 496.5], [709.0, 575.9999999999999], [705.0, 567.4117647058824], [704.0, 587.84375], [718.0, 623.1428571428573], [719.0, 606.2162162162161], [716.0, 728.7419354838709], [717.0, 841.0], [714.0, 550.6629213483145], [715.0, 777.909090909091], [706.0, 818.6470588235293], [707.0, 578.7333333333332], [708.0, 694.0909090909092], [710.0, 1248.6666666666667], [728.0, 1065.25], [729.0, 818.6], [730.0, 764.875], [731.0, 968.1333333333333], [732.0, 639.8888888888889], [733.0, 1075.36], [734.0, 1027.5000000000002], [735.0, 596.3888888888889], [720.0, 514.6851851851851], [721.0, 801.6666666666666], [722.0, 647.1333333333337], [723.0, 678.3529411764705], [724.0, 1085.2500000000002], [725.0, 909.5263157894735], [726.0, 499.73913043478257], [727.0, 1046.1666666666667], [712.0, 951.0], [713.0, 621.8181818181819], [739.0, 923.0645161290325], [736.0, 567.3285714285713], [750.0, 1169.181818181818], [751.0, 1331.8], [748.0, 1204.5625], [749.0, 1769.111111111111], [746.0, 812.9999999999999], [747.0, 1174.2727272727273], [737.0, 568.6571428571428], [738.0, 627.609756097561], [740.0, 753.0434782608695], [741.0, 870.7619047619046], [742.0, 710.1621621621622], [743.0, 722.7272727272727], [752.0, 820.6363636363637], [766.0, 1033.2307692307695], [767.0, 745.9565217391305], [764.0, 786.7500000000001], [765.0, 808.5], [762.0, 1047.8823529411761], [763.0, 924.8309859154931], [760.0, 952.2222222222222], [761.0, 1312.3571428571431], [753.0, 1058.0], [754.0, 1580.2666666666667], [755.0, 1243.090909090909], [756.0, 858.7708333333334], [757.0, 2739.2857142857147], [758.0, 1113.8571428571427], [759.0, 1138.3333333333333], [744.0, 796.25], [745.0, 1135.2857142857142], [774.0, 675.4], [769.0, 1184.6500000000003], [768.0, 959.8421052631579], [782.0, 824.8], [783.0, 805.3333333333334], [780.0, 701.4117647058825], [781.0, 775.24], [778.0, 1490.375], [779.0, 904.8000000000001], [770.0, 1945.272727272727], [771.0, 997.0], [773.0, 1147.8], [772.0, 698.3333333333333], [775.0, 1651.5], [792.0, 707.6976744186047], [793.0, 783.2142857142858], [794.0, 603.7272727272726], [795.0, 2024.0], [796.0, 521.3529411764705], [797.0, 807.2857142857142], [798.0, 698.3103448275863], [799.0, 665.1176470588235], [784.0, 1414.4444444444443], [785.0, 959.5599999999998], [786.0, 1114.3333333333333], [787.0, 1083.4615384615383], [788.0, 939.25], [789.0, 788.7647058823529], [790.0, 828.7142857142857], [791.0, 1143.75], [776.0, 1076.0526315789473], [777.0, 955.8], [806.0, 477.4642857142855], [802.0, 457.3333333333333], [800.0, 510.8852459016393], [801.0, 457.68181818181824], [815.0, 969.4615384615383], [813.0, 1446.0], [814.0, 1407.888888888889], [811.0, 846.7272727272727], [810.0, 874.5], [812.0, 1058.3684210526317], [803.0, 567.5897435897435], [804.0, 467.3125], [805.0, 618.8], [807.0, 939.8333333333334], [824.0, 696.0], [825.0, 822.0555555555555], [826.0, 554.3999999999999], [827.0, 469.2894736842106], [828.0, 2153.3333333333335], [829.0, 496.1470588235293], [830.0, 561.7727272727271], [831.0, 537.4871794871794], [816.0, 781.5652173913045], [817.0, 820.9733333333331], [818.0, 1944.0], [819.0, 534.3529411764705], [820.0, 524.7758620689655], [821.0, 958.0740740740739], [822.0, 1866.0], [823.0, 972.4444444444443], [808.0, 1607.8181818181818], [809.0, 1212.5], [835.0, 389.5394736842106], [832.0, 501.2903225806452], [846.0, 1135.6153846153845], [847.0, 1380.2857142857142], [844.0, 1224.375], [845.0, 943.4375000000001], [842.0, 819.8461538461538], [843.0, 1315.466666666667], [833.0, 502.65517241379314], [834.0, 496.135593220339], [836.0, 977.090909090909], [837.0, 409.9848484848487], [838.0, 387.448275862069], [839.0, 263.3061224489798], [848.0, 1106.72], [863.0, 1647.5], [860.0, 863.8181818181819], [861.0, 990.0], [862.0, 828.6666666666666], [858.0, 1711.75], [859.0, 1042.3636363636363], [856.0, 1119.0666666666668], [857.0, 1164.5], [849.0, 1155.3846153846152], [850.0, 1167.2352941176473], [851.0, 1587.2857142857144], [852.0, 1306.1818181818182], [853.0, 1255.9999999999998], [854.0, 990.4166666666666], [855.0, 1127.3571428571427], [840.0, 1043.1304347826087], [841.0, 916.8750000000001], [867.0, 1213.7307692307693], [864.0, 1183.2777777777776], [879.0, 943.4821428571427], [878.0, 974.9999999999999], [876.0, 966.7777777777778], [877.0, 992.2307692307692], [874.0, 950.3076923076923], [875.0, 1235.1333333333334], [865.0, 1074.2], [866.0, 1069.6666666666667], [868.0, 1141.5555555555559], [869.0, 913.4705882352941], [870.0, 1330.0454545454543], [871.0, 1013.3000000000002], [880.0, 1532.0], [894.0, 1385.25], [895.0, 929.3333333333334], [892.0, 1294.6], [893.0, 885.75], [890.0, 930.55], [891.0, 986.3333333333334], [888.0, 1004.3333333333333], [889.0, 2086.3124999999995], [881.0, 940.2250000000001], [882.0, 1521.6666666666667], [883.0, 972.7142857142857], [884.0, 1025.6785714285716], [885.0, 1250.5], [886.0, 1198.6], [887.0, 1206.65625], [872.0, 2210.0], [873.0, 1536.3749999999998], [899.0, 1449.9], [896.0, 983.2], [910.0, 1074.333333333333], [911.0, 1516.875], [908.0, 998.75], [909.0, 1163.3], [906.0, 1216.9333333333336], [907.0, 962.1999999999999], [897.0, 1215.2727272727273], [898.0, 1107.7777777777778], [900.0, 1048.6666666666667], [901.0, 1293.2068965517237], [902.0, 1054.3333333333333], [903.0, 1286.533333333333], [912.0, 1217.9384615384615], [927.0, 1370.75], [925.0, 1110.3421052631572], [926.0, 1302.1666666666667], [923.0, 962.7352941176471], [924.0, 1025.3750000000002], [921.0, 2285.5], [920.0, 851.3225806451612], [922.0, 988.1833333333335], [913.0, 886.8461538461538], [914.0, 845.7142857142858], [915.0, 904.5142857142854], [916.0, 1036.4411764705883], [917.0, 860.4925373134329], [918.0, 940.2800000000001], [919.0, 1502.1333333333332], [904.0, 1053.0769230769233], [905.0, 1109.6666666666665], [931.0, 1126.6153846153845], [928.0, 1202.2857142857142], [943.0, 1172.363636363636], [941.0, 961.36], [940.0, 965.3636363636364], [942.0, 1172.75], [938.0, 1735.6], [939.0, 1302.5], [929.0, 1373.1538461538462], [930.0, 1047.076923076923], [932.0, 1345.142857142857], [933.0, 1482.8181818181818], [934.0, 1252.0], [935.0, 967.1764705882351], [944.0, 2397.0], [958.0, 932.5599999999998], [959.0, 1618.5], [956.0, 1403.0999999999997], [957.0, 1921.0], [954.0, 1230.6666666666667], [955.0, 1248.5384615384617], [952.0, 1184.5], [953.0, 1273.8823529411766], [945.0, 1053.8235294117646], [946.0, 1138.9999999999998], [947.0, 1010.4000000000002], [948.0, 1099.3877551020407], [949.0, 3326.6], [950.0, 1555.7894736842106], [951.0, 1017.4782608695654], [936.0, 1084.9999999999998], [937.0, 1165.3333333333333], [965.0, 1816.4285714285716], [961.0, 957.4000000000001], [960.0, 1269.3125], [974.0, 2006.4444444444443], [975.0, 1222.6363636363637], [972.0, 964.0454545454546], [973.0, 1007.8461538461538], [970.0, 1112.2142857142858], [971.0, 1037.0], [962.0, 1167.4761904761904], [963.0, 1074.6000000000001], [964.0, 1057.25], [967.0, 976.3], [966.0, 1002.1578947368421], [984.0, 1045.2], [985.0, 1050.8571428571427], [986.0, 1202.4499999999996], [987.0, 1127.6470588235295], [988.0, 1507.307692307692], [989.0, 1230.7741935483873], [990.0, 1018.7209302325581], [991.0, 1217.0333333333335], [976.0, 1003.6666666666666], [977.0, 1161.3030303030305], [978.0, 2184.777777777778], [979.0, 1042.5714285714287], [980.0, 1022.5], [981.0, 1083.1249999999998], [982.0, 1366.3333333333333], [983.0, 1064.375], [968.0, 1357.2666666666667], [969.0, 1150.0], [995.0, 2252.923076923077], [992.0, 1191.8333333333333], [1006.0, 1452.8571428571427], [1007.0, 1825.6428571428573], [1004.0, 1022.060606060606], [1005.0, 1607.7333333333333], [1002.0, 947.9375], [1003.0, 1290.96875], [993.0, 994.4782608695651], [994.0, 1135.0], [996.0, 1105.2105263157896], [997.0, 1978.5], [998.0, 994.8], [999.0, 1104.818181818182], [1008.0, 942.6666666666667], [1022.0, 1089.3333333333333], [1023.0, 1430.8918918918919], [1020.0, 1286.7222222222222], [1021.0, 1548.4615384615386], [1018.0, 4234.333333333333], [1019.0, 1405.3846153846157], [1016.0, 1216.8999999999999], [1017.0, 1156.2380952380952], [1009.0, 2543.5], [1010.0, 954.8461538461538], [1011.0, 953.5], [1012.0, 1132.75], [1013.0, 888.5], [1014.0, 951.0588235294117], [1015.0, 905.5333333333334], [1000.0, 1562.25], [1001.0, 1589.75], [1030.0, 896.5714285714284], [1024.0, 1027.6666666666663], [1052.0, 770.5294117647057], [1054.0, 1207.0500000000002], [1048.0, 1329.857142857143], [1050.0, 1198.4615384615386], [1044.0, 816.1785714285716], [1046.0, 813.2894736842104], [1026.0, 2048.333333333334], [1028.0, 949.96875], [1032.0, 817.679245283019], [1034.0, 818.3749999999999], [1036.0, 1141.6], [1038.0, 1152.9615384615383], [1056.0, 751.7384615384617], [1086.0, 888.1538461538462], [1082.0, 1725.3636363636363], [1084.0, 1627.5714285714287], [1076.0, 1601.5], [1078.0, 1323.875], [1080.0, 915.3333333333333], [1072.0, 819.2799999999999], [1074.0, 749.2857142857141], [1058.0, 1143.4444444444441], [1060.0, 1336.1666666666667], [1062.0, 780.1923076923078], [1064.0, 707.2624999999998], [1066.0, 751.2380952380953], [1068.0, 1033.7272727272727], [1070.0, 788.0243902439025], [1040.0, 944.7333333333332], [1042.0, 1418.6], [1094.0, 825.9333333333334], [1088.0, 1076.0], [1116.0, 992.5600000000001], [1118.0, 1657.0], [1112.0, 727.3333333333334], [1114.0, 967.8571428571428], [1108.0, 1400.3333333333333], [1110.0, 848.3333333333335], [1090.0, 1299.0], [1092.0, 867.9375], [1096.0, 1423.1875], [1098.0, 747.75], [1100.0, 2175.5625], [1102.0, 900.8999999999999], [1120.0, 1031.4102564102564], [1148.0, 991.2222222222222], [1150.0, 997.8], [1144.0, 970.9999999999999], [1146.0, 3369.75], [1140.0, 1002.3636363636363], [1142.0, 3098.8], [1136.0, 1228.5454545454545], [1138.0, 1241.9999999999998], [1122.0, 885.0], [1124.0, 1096.6923076923078], [1126.0, 1445.2666666666664], [1130.0, 1074.9999999999998], [1128.0, 985.5], [1132.0, 1006.1666666666666], [1134.0, 912.6923076923077], [1104.0, 946.7999999999998], [1106.0, 1239.3684210526317], [1158.0, 1122.9999999999998], [1152.0, 1306.6896551724137], [1180.0, 986.9444444444443], [1182.0, 1001.4827586206895], [1176.0, 882.4761904761906], [1178.0, 953.25], [1172.0, 956.9629629629628], [1174.0, 1019.9239130434785], [1154.0, 1502.5714285714284], [1156.0, 1675.6], [1160.0, 960.6774193548387], [1162.0, 1103.681818181818], [1164.0, 1069.0], [1166.0, 1493.5], [1184.0, 1426.5833333333333], [1212.0, 1027.1666666666667], [1214.0, 2123.6], [1208.0, 906.0], [1210.0, 4044.0], [1204.0, 2232.6], [1206.0, 1275.0], [1200.0, 518.7435897435897], [1202.0, 800.7916666666666], [1186.0, 950.2727272727273], [1188.0, 677.7741935483872], [1190.0, 670.9230769230769], [1192.0, 629.4880952380952], [1194.0, 828.7358490566037], [1196.0, 897.6400000000002], [1198.0, 2550.8571428571427], [1168.0, 1696.3333333333335], [1170.0, 949.7079646017702], [1222.0, 1049.75], [1216.0, 2345.8333333333335], [1244.0, 1732.2], [1246.0, 3383.0], [1240.0, 1058.2], [1242.0, 2636.4], [1236.0, 794.0], [1238.0, 1230.2], [1218.0, 1826.0], [1220.0, 1310.0], [1224.0, 913.5], [1226.0, 867.0], [1228.0, 2343.75], [1230.0, 1433.5], [1248.0, 1758.3333333333335], [1276.0, 1380.1739130434783], [1278.0, 957.0909090909091], [1272.0, 1312.5], [1274.0, 1498.2222222222222], [1268.0, 1306.4166666666667], [1270.0, 1358.4444444444446], [1264.0, 1776.3636363636365], [1266.0, 1808.6000000000001], [1250.0, 2021.0], [1252.0, 1785.0], [1254.0, 1723.1666666666667], [1256.0, 510.0], [1258.0, 712.8454619787406], [1260.0, 1746.1], [1262.0, 1229.1111111111109], [1232.0, 3568.1666666666665], [1234.0, 1540.0], [1292.0, 997.7500000000001], [1284.0, 1740.1111111111109], [1280.0, 1280.4800000000002], [1282.0, 1109.7142857142856], [1308.0, 1211.769230769231], [1310.0, 1455.6764705882356], [1304.0, 1678.466666666667], [1306.0, 1093.8333333333335], [1300.0, 1203.3636363636365], [1302.0, 1002.5], [1286.0, 3522.25], [1288.0, 826.5], [1290.0, 1172.2692307692307], [1294.0, 1688.5454545454543], [1328.0, 1011.3823529411767], [1330.0, 1782.5], [1332.0, 954.9333333333333], [1334.0, 960.8], [1336.0, 979.7142857142858], [1338.0, 978.2820512820515], [1340.0, 1340.0], [1342.0, 1620.8260869565215], [1312.0, 1203.8387096774195], [1314.0, 1252.1875000000002], [1316.0, 1718.1818181818182], [1318.0, 1391.923076923077], [1320.0, 1107.0666666666666], [1322.0, 1016.2051282051281], [1324.0, 943.6], [1326.0, 1017.8545454545454], [1296.0, 947.7777777777778], [1298.0, 1145.615384615385], [1350.0, 1107.5454545454545], [1344.0, 971.0657894736844], [1372.0, 1092.0], [1374.0, 789.5], [1368.0, 1223.0], [1370.0, 841.3125], [1364.0, 1227.9032258064517], [1366.0, 984.9830508474581], [1346.0, 1245.2758620689658], [1348.0, 1102.6666666666667], [1352.0, 1049.2], [1354.0, 1102.4], [1356.0, 903.5], [1358.0, 915.8000000000001], [1376.0, 2799.75], [1404.0, 1102.967741935484], [1406.0, 892.3378378378378], [1400.0, 956.8148148148146], [1402.0, 940.8541666666667], [1396.0, 1260.1000000000001], [1398.0, 1262.8749999999998], [1392.0, 1045.0], [1394.0, 2079.6], [1378.0, 1061.85], [1380.0, 910.9583333333334], [1382.0, 857.3800000000003], [1384.0, 1447.7499999999998], [1386.0, 1116.96], [1388.0, 894.921875], [1390.0, 837.5], [1360.0, 972.1], [1362.0, 1477.8], [1420.0, 1747.111111111111], [1412.0, 1148.4250000000004], [1410.0, 1071.9090909090908], [1408.0, 938.6666666666667], [1436.0, 1181.5], [1438.0, 1031.5454545454547], [1432.0, 888.6666666666666], [1434.0, 1813.6666666666665], [1428.0, 3061.8333333333335], [1430.0, 1114.3125], [1414.0, 1400.6111111111109], [1416.0, 1902.666666666667], [1418.0, 1239.0645161290324], [1422.0, 1793.0833333333335], [1456.0, 1904.8181818181815], [1458.0, 1156.5], [1460.0, 1027.6666666666667], [1462.0, 987.0000000000001], [1464.0, 811.5806451612902], [1466.0, 2556.0], [1468.0, 1373.0588235294117], [1470.0, 1288.962962962963], [1440.0, 1737.6], [1442.0, 1350.2249999999997], [1444.0, 1629.3116883116882], [1446.0, 1553.6153846153848], [1448.0, 1249.1], [1450.0, 910.5833333333334], [1452.0, 884.3939393939396], [1454.0, 771.3333333333334], [1424.0, 1836.1666666666667], [1426.0, 1077.8970588235297], [1478.0, 1178.9550561797753], [1472.0, 1355.1818181818182], [1500.0, 2704.6581493497124], [1496.0, 1070.3000000000002], [1498.0, 983.4333333333335], [1492.0, 999.5428571428574], [1494.0, 1149.1739130434785], [1474.0, 1226.536585365854], [1476.0, 1089.7826086956522], [1480.0, 1150.7419354838714], [1482.0, 1548.6428571428573], [1484.0, 858.6184210526314], [1486.0, 919.1428571428571], [1488.0, 888.5178571428572], [1490.0, 878.8648648648651], [1031.0, 1113.6285714285714], [1025.0, 1236.7307692307693], [1053.0, 814.0833333333335], [1055.0, 840.9999999999998], [1049.0, 955.4], [1051.0, 833.076923076923], [1045.0, 1129.2727272727273], [1047.0, 1003.0], [1027.0, 779.25], [1029.0, 1058.2380952380954], [1033.0, 1173.9444444444443], [1035.0, 849.1707317073173], [1037.0, 1376.909090909091], [1039.0, 1178.1875], [1057.0, 1455.8], [1085.0, 854.7249999999999], [1087.0, 846.3333333333333], [1081.0, 783.1698113207547], [1083.0, 872.625], [1077.0, 804.8522727272729], [1079.0, 1115.2727272727273], [1073.0, 761.4680851063828], [1075.0, 1293.125], [1059.0, 1621.0], [1061.0, 704.3846153846154], [1063.0, 806.1296296296297], [1065.0, 769.4736842105264], [1067.0, 777.8947368421052], [1069.0, 2337.571428571429], [1071.0, 2089.285714285714], [1041.0, 807.6], [1043.0, 2343.933333333334], [1099.0, 769.3666666666667], [1091.0, 868.9999999999999], [1089.0, 1054.0], [1117.0, 1074.0909090909095], [1119.0, 1911.75], [1113.0, 1247.8437499999998], [1115.0, 889.4054054054053], [1109.0, 1396.3333333333333], [1111.0, 1243.125], [1093.0, 761.0], [1095.0, 1609.3333333333335], [1097.0, 1014.8571428571428], [1103.0, 1093.5454545454547], [1101.0, 808.0555555555557], [1137.0, 1240.241379310345], [1139.0, 902.8749999999999], [1141.0, 1838.0], [1143.0, 1084.4375], [1145.0, 1634.5], [1147.0, 1105.8333333333335], [1149.0, 965.25], [1151.0, 1097.0], [1121.0, 1272.75], [1123.0, 947.8636363636364], [1125.0, 1440.8749999999998], [1127.0, 1130.1578947368419], [1129.0, 810.0], [1131.0, 1084.5348837209303], [1133.0, 2385.4], [1135.0, 1421.28125], [1105.0, 742.769230769231], [1107.0, 1809.6666666666667], [1165.0, 1179.2], [1155.0, 1088.0784313725492], [1153.0, 1224.3999999999996], [1181.0, 1160.5882352941176], [1183.0, 1130.066666666667], [1177.0, 753.1794871794872], [1179.0, 788.96875], [1157.0, 1629.4], [1159.0, 1066.6129032258066], [1161.0, 1229.3636363636365], [1163.0, 967.2], [1185.0, 691.0], [1213.0, 1363.6666666666667], [1215.0, 1819.8], [1209.0, 2912.0], [1211.0, 775.0], [1205.0, 1076.5], [1207.0, 2434.8], [1201.0, 665.6399999999999], [1167.0, 939.0], [1203.0, 560.6666666666666], [1187.0, 1066.8181818181822], [1189.0, 582.1296296296297], [1191.0, 770.1612903225806], [1193.0, 559.2432432432428], [1195.0, 523.8500000000001], [1199.0, 826.3181818181819], [1197.0, 452.0], [1169.0, 1954.9374999999998], [1171.0, 990.9062500000001], [1173.0, 851.3333333333335], [1175.0, 1132.125], [1223.0, 1278.2], [1217.0, 915.5], [1245.0, 3619.6], [1247.0, 1872.4], [1241.0, 3199.0], [1243.0, 1286.4], [1237.0, 696.5], [1239.0, 3600.0], [1219.0, 1476.75], [1221.0, 1856.5714285714287], [1225.0, 1952.0], [1227.0, 1728.5], [1229.0, 1484.1666666666667], [1231.0, 1820.6666666666667], [1249.0, 2848.4], [1277.0, 1405.7142857142858], [1279.0, 1043.625], [1273.0, 1118.6153846153843], [1275.0, 2409.625], [1269.0, 805.6666666666665], [1271.0, 1241.888888888889], [1265.0, 1078.4], [1267.0, 1163.4285714285713], [1251.0, 2087.833333333333], [1253.0, 3380.6666666666665], [1255.0, 1720.6], [1257.0, 6564.5], [1259.0, 1850.5555555555557], [1261.0, 1294.8000000000002], [1263.0, 1288.9583333333333], [1233.0, 1397.25], [1235.0, 5099.666666666667], [1287.0, 1568.625], [1281.0, 1211.3043478260868], [1309.0, 1797.6], [1311.0, 1285.6], [1305.0, 1623.666666666667], [1307.0, 2954.3333333333335], [1301.0, 1139.0000000000002], [1303.0, 1138.8214285714287], [1283.0, 1135.7999999999997], [1285.0, 1493.857142857143], [1289.0, 1442.2631578947369], [1291.0, 2210.9166666666665], [1293.0, 1487.6923076923078], [1295.0, 1626.4545454545455], [1313.0, 1140.3214285714284], [1341.0, 1733.185185185185], [1343.0, 1029.8749999999998], [1337.0, 1067.1643835616435], [1339.0, 854.0], [1333.0, 983.0322580645161], [1335.0, 1348.4705882352944], [1329.0, 1088.3448275862067], [1331.0, 1372.2500000000002], [1315.0, 1143.3333333333333], [1317.0, 1676.0625000000002], [1319.0, 1113.3846153846152], [1321.0, 1134.7196969696963], [1323.0, 1176.0624999999998], [1325.0, 1104.034482758621], [1327.0, 1857.125], [1297.0, 1406.3478260869563], [1299.0, 1481.8999999999996], [1351.0, 977.8947368421053], [1345.0, 889.0], [1373.0, 1629.7999999999997], [1375.0, 873.3333333333334], [1369.0, 3578.6666666666665], [1371.0, 1152.6000000000004], [1365.0, 1055.3939393939397], [1367.0, 899.0000000000002], [1347.0, 1099.7941176470586], [1349.0, 1683.0], [1353.0, 887.4146341463414], [1355.0, 1066.1499999999999], [1357.0, 976.9642857142859], [1359.0, 1678.2222222222222], [1377.0, 972.6111111111112], [1405.0, 886.2413793103448], [1407.0, 1694.25], [1401.0, 1560.1666666666665], [1403.0, 939.6666666666666], [1397.0, 1403.090909090909], [1399.0, 1388.8333333333333], [1393.0, 933.0], [1395.0, 1127.4489795918373], [1379.0, 1231.2142857142856], [1381.0, 867.3541666666667], [1383.0, 1207.5], [1385.0, 903.7272727272727], [1387.0, 2165.25], [1389.0, 830.2], [1391.0, 1489.0], [1361.0, 1660.3333333333333], [1363.0, 1832.5000000000002], [1415.0, 1070.0000000000002], [1409.0, 952.1794871794872], [1437.0, 1827.75], [1439.0, 1003.7058823529412], [1433.0, 1051.2777777777778], [1435.0, 1180.7272727272725], [1429.0, 2733.833333333333], [1431.0, 944.9791666666667], [1411.0, 1711.5833333333335], [1413.0, 3038.0], [1417.0, 1909.3], [1419.0, 857.2], [1421.0, 1084.7857142857142], [1423.0, 2395.285714285714], [1441.0, 925.1111111111111], [1469.0, 1273.8823529411768], [1471.0, 1288.0], [1465.0, 750.6666666666666], [1467.0, 1176.8026315789473], [1461.0, 1460.230769230769], [1463.0, 1337.6999999999998], [1457.0, 1413.7619047619048], [1459.0, 1186.8181818181815], [1443.0, 974.7460317460316], [1445.0, 2418.0], [1447.0, 1368.0], [1449.0, 886.125], [1451.0, 1221.230769230769], [1453.0, 957.2941176470589], [1455.0, 957.1355932203389], [1425.0, 1146.7142857142858], [1427.0, 1024.3999999999999], [1479.0, 1005.5555555555555], [1473.0, 1508.8387096774193], [1497.0, 898.7027027027027], [1499.0, 808.4308943089429], [1493.0, 859.4200000000001], [1495.0, 889.2363636363636], [1475.0, 1840.0833333333335], [1477.0, 1242.6415094339625], [1481.0, 1734.2307692307693], [1483.0, 1061.7840909090908], [1485.0, 868.1481481481484], [1487.0, 1080.740740740741], [1489.0, 866.4375], [1491.0, 871.4230769230769], [1.0, 1.8571428571428572]], "isOverall": false, "label": "HTTP Request - Index", "isController": false}, {"data": [[1172.1202541196446, 1780.6709724150462]], "isOverall": false, "label": "HTTP Request - Index-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 12771.533333333333, "minX": 1.67224434E12, "maxY": 2610518.2333333334, "series": [{"data": [[1.67224434E12, 861508.55], [1.6722444E12, 2610518.2333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.67224434E12, 21304.9], [1.6722444E12, 12771.533333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6722444E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1583.0806081727774, "minX": 1.67224434E12, "maxY": 2785.5710349894316, "series": [{"data": [[1.67224434E12, 2785.5710349894316], [1.6722444E12, 1583.0806081727774]], "isOverall": false, "label": "HTTP Request - Index", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6722444E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 756.0219938965997, "minX": 1.67224434E12, "maxY": 2705.7816144733115, "series": [{"data": [[1.67224434E12, 2705.7816144733115], [1.6722444E12, 756.0219938965997]], "isOverall": false, "label": "HTTP Request - Index", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6722444E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1492.442911572973, "minX": 1.67224434E12, "maxY": 2121.2915786573644, "series": [{"data": [[1.67224434E12, 2121.2915786573644], [1.6722444E12, 1492.442911572973]], "isOverall": false, "label": "HTTP Request - Index", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6722444E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.7976931348623157E308, "minX": 1.7976931348623157E308, "maxY": 4.9E-324, "series": [{"data": [], "isOverall": false, "label": "Max", "isController": false}, {"data": [], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [], "isOverall": false, "label": "Min", "isController": false}, {"data": [], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 4.9E-324, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 34.0, "minX": 43.0, "maxY": 2758.0, "series": [{"data": [[521.0, 1738.0], [533.0, 2612.0], [514.0, 2671.0], [542.0, 2579.5], [556.0, 2758.0], [574.0, 1542.0], [565.0, 2347.0], [566.0, 2624.0], [544.0, 2564.0], [547.0, 2647.0], [582.0, 2728.0], [654.0, 2739.5], [766.0, 1109.0], [796.0, 34.0], [913.0, 957.0], [1012.0, 98.5], [998.0, 340.0], [1056.0, 1996.0], [1076.0, 959.0], [1080.0, 678.5], [1041.0, 833.0], [1051.0, 174.0], [1149.0, 985.0], [1146.0, 89.0], [1180.0, 607.5], [1213.0, 1271.0], [1224.0, 473.0], [1241.0, 211.0], [1298.0, 498.0], [1352.0, 224.0], [1426.0, 527.0], [1555.0, 848.0], [1558.0, 259.0], [1642.0, 375.0], [1654.0, 914.5], [1623.0, 905.0], [1602.0, 550.0], [1720.0, 487.0], [1698.0, 380.0], [1739.0, 263.0], [1748.0, 910.0], [1811.0, 1362.0], [1923.0, 1001.0], [2580.0, 265.0], [43.0, 519.0], [126.0, 680.0], [233.0, 716.0], [245.0, 1575.0], [251.0, 1007.0], [253.0, 1511.0], [261.0, 577.0], [257.0, 1671.0], [259.0, 742.0], [266.0, 609.0], [268.0, 1083.0], [265.0, 1498.0], [269.0, 1508.0], [263.0, 1555.0], [286.0, 1575.0], [275.0, 534.0], [273.0, 575.0], [284.0, 1487.5], [285.0, 1570.0], [279.0, 1395.0], [272.0, 1670.0], [282.0, 1529.0], [281.0, 1522.0], [283.0, 1502.0], [287.0, 1573.0], [280.0, 1562.5], [301.0, 1514.0], [295.0, 1511.0], [296.0, 1495.5], [298.0, 1006.5], [299.0, 1195.0], [303.0, 830.0], [297.0, 1527.0], [292.0, 1531.0], [288.0, 1623.0], [291.0, 1587.0], [312.0, 688.0], [305.0, 654.0], [311.0, 1385.0], [316.0, 1266.5], [317.0, 972.0], [307.0, 713.0], [306.0, 726.0], [416.0, 2277.0], [473.0, 2617.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2580.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 43.0, "maxY": 1661.0, "series": [{"data": [[521.0, 0.0], [533.0, 0.0], [514.0, 0.0], [542.0, 0.0], [556.0, 0.0], [574.0, 0.0], [565.0, 0.0], [566.0, 0.0], [544.0, 0.0], [547.0, 0.0], [582.0, 0.0], [654.0, 0.0], [766.0, 0.0], [796.0, 0.0], [913.0, 0.0], [1012.0, 0.0], [998.0, 0.0], [1056.0, 0.0], [1076.0, 0.0], [1080.0, 0.0], [1041.0, 0.0], [1051.0, 0.0], [1149.0, 0.0], [1146.0, 0.0], [1180.0, 0.0], [1213.0, 0.0], [1224.0, 0.0], [1241.0, 0.0], [1298.0, 0.0], [1352.0, 0.0], [1426.0, 0.0], [1555.0, 0.0], [1558.0, 0.0], [1642.0, 0.0], [1654.0, 0.0], [1623.0, 0.0], [1602.0, 0.0], [1720.0, 0.0], [1698.0, 0.0], [1739.0, 0.0], [1748.0, 0.0], [1811.0, 0.0], [1923.0, 0.0], [2580.0, 0.0], [43.0, 508.0], [126.0, 669.0], [233.0, 706.0], [245.0, 1565.0], [251.0, 923.0], [253.0, 1503.0], [261.0, 565.0], [257.0, 1661.0], [259.0, 712.0], [266.0, 593.5], [268.0, 820.5], [265.0, 1478.0], [269.0, 1495.0], [263.0, 1545.0], [286.0, 1554.0], [275.0, 523.0], [273.0, 563.0], [284.0, 1476.0], [285.0, 1554.0], [279.0, 1373.0], [272.0, 1660.5], [282.0, 1517.5], [281.0, 1505.5], [283.0, 1491.0], [287.0, 1560.0], [280.0, 1551.5], [301.0, 1501.0], [295.0, 1500.0], [296.0, 1460.0], [298.0, 962.5], [299.0, 1183.0], [303.0, 818.0], [297.0, 1505.0], [292.0, 1517.5], [288.0, 1610.5], [291.0, 1576.0], [312.0, 676.5], [305.0, 644.0], [311.0, 1375.0], [316.0, 1250.5], [317.0, 951.0], [307.0, 689.0], [306.0, 712.5], [416.0, 0.0], [473.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2580.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 206.48333333333332, "minX": 1.67224434E12, "maxY": 897.9833333333333, "series": [{"data": [[1.67224434E12, 206.48333333333332], [1.6722444E12, 897.9833333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6722444E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.7666666666666667, "minX": 1.67224434E12, "maxY": 813.9833333333333, "series": [{"data": [[1.67224434E12, 180.55], [1.6722444E12, 108.23333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6722444E12, 813.9833333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.BindException", "isController": false}, {"data": [[1.67224434E12, 0.9333333333333333], [1.6722444E12, 0.7666666666666667]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6722444E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 181.48333333333332, "minX": 1.67224434E12, "maxY": 922.9833333333333, "series": [{"data": [[1.67224434E12, 181.48333333333332], [1.6722444E12, 922.9833333333333]], "isOverall": false, "label": "HTTP Request - Index-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6722444E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 181.48333333333332, "minX": 1.67224434E12, "maxY": 922.9833333333333, "series": [{"data": [], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.67224434E12, 181.48333333333332], [1.6722444E12, 922.9833333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6722444E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

